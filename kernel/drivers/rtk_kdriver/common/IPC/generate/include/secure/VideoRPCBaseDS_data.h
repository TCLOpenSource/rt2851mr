/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VIDEORPCBASEDS_DATA_H_RPCGEN
#define _VIDEORPCBASEDS_DATA_H_RPCGEN

#include <rpc_common.h>

struct RPC_RINGBUFFER {
	long instanceID;
	long pinID;
	long readPtrIndex;
	long pRINGBUFF_HEADER;
};
typedef struct RPC_RINGBUFFER RPC_RINGBUFFER;

enum VIDEO_VF_TYPE {
	VF_TYPE_VIDEO_MPEG2_DECODER = 0,
	VF_TYPE_VIDEO_MPEG4_DECODER = 1,
	VF_TYPE_VIDEO_DIVX_DECODER = 2,
	VF_TYPE_VIDEO_H263_DECODER = 3,
	VF_TYPE_VIDEO_H264_DECODER = 4,
	VF_TYPE_VIDEO_VC1_DECODER = 5,
	VF_TYPE_VIDEO_REAL_DECODER = 6,
	VF_TYPE_VIDEO_JPEG_DECODER = 7,
	VF_TYPE_VIDEO_MJPEG_DECODER = 8,
	VF_TYPE_SPU_DECODER = 9,
	VF_TYPE_VIDEO_OUT = 10,
	VF_TYPE_TRANSITION = 11,
	VF_TYPE_THUMBNAIL = 12,
	VF_TYPE_VIDEO_VP6_DECODER = 13,
	VF_TYPE_VIDEO_IMAGE_DECODER = 14,
	VF_TYPE_FLASH = 15,
	VF_TYPE_VIDEO_AVS_DECODER = 16,
	VF_TYPE_MIXER = 17,
	VF_TYPE_VIDEO_VP8_DECODER = 18,
	VF_TYPE_VIDEO_WMV7_DECODER = 19,
	VF_TYPE_VIDEO_WMV8_DECODER = 20,
	VF_TYPE_TVD = 21,
	VF_TYPE_VIDEO_ENCODER = 22,
	VF_TYPE_VIDEO_RAW_DECODER = 23,
	VF_TYPE_VIDEO_FJPEG_DECODER = 24,
	VF_TYPE_VIDEO_H264lv51_DECODER = 25,
	VF_TYPE_VIDEO_CAPTURER = 26,
	VF_TYPE_VIDEO_H265_DECODER = 27,
	VF_TYPE_VIDEO_VP9_DECODER = 28,
	VF_TYPE_RAWCONV = 29,
	VF_TYPE_VIDEO_SPLITTER = 30,
	VF_TYPE_VIDEO_AVS2_DECODER = 31,
	VF_TYPE_VIDEO_COMPOSER = 32,
	VF_TYPE_VIDEO_AV1_DECODER = 33,
};
typedef enum VIDEO_VF_TYPE VIDEO_VF_TYPE;

enum VIDEO_LOW_DELAY {
	LOW_DELAY_OFF = 0,
	LOW_DELAY_DECODER = 1,
	LOW_DELAY_DISPLAY = 2,
	LOW_DELAY_DECODER_DISPLAY = 3,
};
typedef enum VIDEO_LOW_DELAY VIDEO_LOW_DELAY;

enum VIDEO_IMG_TYPE {
	IMG_JPEG = 0,
	IMG_PNG = 1,
	IMG_BMP = 2,
	IMG_GIF = 3,
	IMG_TIFF = 4,
	IMG_WEBP = 5,
	IMG_PSEUDO = 6,
	IMG_HEIF = 7,
};
typedef enum VIDEO_IMG_TYPE VIDEO_IMG_TYPE;

enum VIDEO_RATE_CONTROL_MODE {
	VIDEO_RATE_CBR = 0,
	VIDEO_RATE_CBG = 1,
	VIDEO_RATE_VBR = 2,
	VIDEO_RATE_CVBR = 3,
	VIDEO_RATE_NVBR = 4,
};
typedef enum VIDEO_RATE_CONTROL_MODE VIDEO_RATE_CONTROL_MODE;

enum VIDEO_SOURCE {
	VIDEO_SOURCE_VIN = 0,
	VIDEO_SOURCE_DIN = 1,
	VIDEO_SOURCE_RAWIN = 2,
};
typedef enum VIDEO_SOURCE VIDEO_SOURCE;

enum VIDEO_JPEG_ROTATION {
	VIDEO_ROTATE_0 = 0,
	VIDEO_ROTATE_90 = 1,
	VIDEO_ROTATE_180 = 2,
	VIDEO_ROTATE_270 = 3,
};
typedef enum VIDEO_JPEG_ROTATION VIDEO_JPEG_ROTATION;

enum VIDEO_JPEG_MIRROR {
	VIDEO_MIRROR_NONE = 0,
	VIDEO_MIRROR_X = 1,
	VIDEO_MIRROR_Y = 2,
	VIDEO_MIRROR_XY = 3,
};
typedef enum VIDEO_JPEG_MIRROR VIDEO_JPEG_MIRROR;

enum IMG_TARGET_FORMAT {
	IMG_YUV = 0,
	IMG_ARGB8888 = 1,
	IMG_RGB565 = 2,
	IMG_RGB332 = 3,
	IMG_HANDLE = 4,
	IMG_RGBA8888 = 5,
	IMG_RGBA8888_LE = 6,
	IMG_ARGB8888_LE = 7,
	IMG_RGB565_LE = 8,
};
typedef enum IMG_TARGET_FORMAT IMG_TARGET_FORMAT;

enum IMG_TARGET_POSITION {
	IMG_TARGET_LEFTTOP = 0,
	IMG_TARGET_CENTER = 1,
	IMG_TARGET_FILL = 2,
};
typedef enum IMG_TARGET_POSITION IMG_TARGET_POSITION;

enum IMG_SOURCE_PICTURE_SELECT {
	IMG_PICTURE_OPTIONAL = 0,
	IMG_PICTURE_WHOLE = 1,
	IMG_PICTURE_THUMBNAIL = 2,
	IMG_PICTURE_THUMBNAIL_FIRST = 3,
};
typedef enum IMG_SOURCE_PICTURE_SELECT IMG_SOURCE_PICTURE_SELECT;

enum IMG_STATUS {
	IMG_STATUS_INIT = 0,
	IMG_STATUS_FINISH = 1,
	IMG_STATUS_FAIL_DECODE = 2,
	IMG_STATUS_UNSUPPORT = 3,
	IMG_STATUS_TIFF_FOR_BATCH = 4,
	IMG_STATUS_ANIMATION_GIF = 5,
	IMG_STATUS_UNSUPPORT_SIZE = 6,
};
typedef enum IMG_STATUS IMG_STATUS;

enum VIDEO_COLOR_FMT {
	VIDEO_COLOR_YUV = 0,
	VIDEO_COLOR_ARGB8888 = 1,
	VIDEO_COLOR_RGB565 = 2,
	VIDEO_COLOR_RGB332 = 3,
	VIDEO_COLOR_RGBA8888 = 4,
	VIDEO_COLOR_HANDLE = 5,
	VIDEO_COLOR_ARGB8888_LE = 6,
	VIDEO_COLOR_JPEG = 7,
};
typedef enum VIDEO_COLOR_FMT VIDEO_COLOR_FMT;

enum VIDEO_TRANSITION_TYPE {
	VIDEO_TRANSITION_COPY = 0,
	VIDEO_TRANSITION_CROSSFADE = 1,
	VIDEO_TRANSITION_LEFT_TO_RIGHT = 2,
	VIDEO_TRANSITION_TOP_TO_BOTTOM = 3,
	VIDEO_TRANSITION_WATERFALL = 4,
	VIDEO_TRANSITION_SNAKE = 5,
	VIDEO_TRANSITION_RANDOM_BOX = 6,
	VIDEO_TRANSITION_DIAGONAL = 7,
	VIDEO_TRANSITION_FADEIN_FADEOUT = 8,
	VIDEO_TRANSITION_MOVE = 9,
	VIDEO_TRANSITION_CROSSFADE_KENBURNS = 10,
	VIDEO_TRANSITION_WINDOW = 11,
	VIDEO_TRANSITION_EXTEND = 12,
	VIDEO_TRANSITION_EXPAND = 13,
	VIDEO_TRANSITION_STEP_ALPHA = 14,
	VIDEO_TRANSITION_FLYING_RECTANGLE = 15,
	VIDEO_TRANSITION_VENETIAN_BLINDS = 16,
	VIDEO_TRANSITION_BLUR = 17,
	VIDEO_TRANSITION_CIRCLE = 18,
	VIDEO_TRANSITION_RIGHT_TO_LEFT = 19,
	VIDEO_TRANSITION_BOTTOM_TO_TOP = 20,
	VIDEO_TRANSITION_UNKNOWN = 21,
};
typedef enum VIDEO_TRANSITION_TYPE VIDEO_TRANSITION_TYPE;

enum VIDEO_FORMAT {
	VIDEO_FORMAT_NTSC = 0,
	VIDEO_FORMAT_PAL = 1,
	VIDEO_FORMAT_NTSC_443 = 2,
	VIDEO_FORMAT_PAL_M = 3,
	VIDEO_FORMAT_PAL_CN = 4,
	VIDEO_FORMAT_SECAM = 5,
	VIDEO_FORMAT_480P = 6,
	VIDEO_FORMAT_576P = 7,
	VIDEO_FORMAT_720P50 = 8,
	VIDEO_FORMAT_720P60 = 9,
	VIDEO_FORMAT_720P25 = 10,
	VIDEO_FORMAT_720P30 = 11,
	VIDEO_FORMAT_720I50 = 12,
	VIDEO_FORMAT_720I60 = 13,
	VIDEO_FORMAT_1080I50 = 14,
	VIDEO_FORMAT_1080I60 = 15,
	VIDEO_FORMAT_1080P50 = 16,
	VIDEO_FORMAT_1080P60 = 17,
	VIDEO_FORMAT_NTSC_15P = 18,
	VIDEO_FORMAT_NTSC_10P = 19,
	VIDEO_FORMAT_PAL_15P = 20,
	VIDEO_FORMAT_PAL_10P = 21,
};
typedef enum VIDEO_FORMAT VIDEO_FORMAT;

enum VIDEO_STREAM_TYPE {
	VIDEO_STREAM_MPEG1 = 0,
	VIDEO_STREAM_MPEG2 = 1,
	VIDEO_STREAM_MPEG4 = 2,
	VIDEO_STREAM_DIVX3 = 3,
	VIDEO_STREAM_H263 = 4,
	VIDEO_STREAM_H264 = 5,
	VIDEO_STREAM_VC1 = 6,
	VIDEO_STREAM_REALVIDEO = 7,
	VIDEO_STREAM_MJPEG = 8,
	VIDEO_STREAM_VP6 = 9,
	VIDEO_STREAM_AVS = 10,
	VIDEO_STREAM_YUV = 11,
	VIDEO_STREAM_VP8 = 12,
	VIDEO_STREAM_WMV7 = 13,
	VIDEO_STREAM_WMV8 = 14,
	VIDEO_STREAM_RAW = 15,
	VIDEO_STREAM_UNKNOWN = 16,
	VIDEO_STREAM_FJPEG = 17,
	VIDEO_STREAM_H264lv51 = 18,
	VIDEO_STREAM_H265 = 19,
	VIDEO_STREAM_VP9 = 20,
	VIDEO_STREAM_AVS2 = 21,
	VIDEO_STREAM_AV1 = 22,
};
typedef enum VIDEO_STREAM_TYPE VIDEO_STREAM_TYPE;

enum VIDEO_DECODER_CC_BYPASS_MODE {
	VIDEODECODER_CC_DROP = 0,
	VIDEODECODER_CC_BYPASS = 1,
	VIDEODECODER_CC_DECODE = 2,
	VIDEODECODER_CC_CALLBACK = 3,
};
typedef enum VIDEO_DECODER_CC_BYPASS_MODE VIDEO_DECODER_CC_BYPASS_MODE;

enum CMPRS_RATIO {
	CMPRS_RATIO_50 = 0,
	CMPRS_RATIO_75 = 1,
};
typedef enum CMPRS_RATIO CMPRS_RATIO;

enum ENUM_VIDEO_SUBPIC_INFO_TYPE {
	VIDEOSUBPIC_IB_INFO_TYPE = 0,
};
typedef enum ENUM_VIDEO_SUBPIC_INFO_TYPE ENUM_VIDEO_SUBPIC_INFO_TYPE;

enum ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE {
	VIDEOENCODER_VideoGEN = 0,
	VIDEOENCODER_VideoFrameInfo = 1,
	VIDEOENCODER_VideoVBID_WSS_Info = 2,
	VIDEOENCODER_VideoEndOfStream_Info = 3,
	VIDEOENCODER_Input_EndOfStream_Info = 4,
	VIDEOENCODER_VideoPauseInfo = 5,
	VIDEOENCODER_AutoPauseInfo = 6,
	VIDEOENCODER_TotalInfo = 7,
};
typedef enum ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE;

enum ENUM_VIDEO_ENCODER_RC_MODE {
	VIDEOENCODER_CBR = 0,
	VIDEOENCODER_VBR = 1,
	VIDEOENCODER_CVBR = 2,
	VIDEOENCODER_TotalRCMode = 3,
};
typedef enum ENUM_VIDEO_ENCODER_RC_MODE ENUM_VIDEO_ENCODER_RC_MODE;

enum ENUM_VIDEO_MSG_INFO_TYPE {
	VIDEO_Pic_Info = 0,
	VIDEO_Frm_Info = 1,
};
typedef enum ENUM_VIDEO_MSG_INFO_TYPE ENUM_VIDEO_MSG_INFO_TYPE;

enum VO_STANDARD {
	VO_STANDARD_NTSC_M = 0,
	VO_STANDARD_NTSC_J = 1,
	VO_STANDARD_NTSC_443 = 2,
	VO_STANDARD_PAL_B = 3,
	VO_STANDARD_PAL_D = 4,
	VO_STANDARD_PAL_G = 5,
	VO_STANDARD_PAL_H = 6,
	VO_STANDARD_PAL_I = 7,
	VO_STANDARD_PAL_N = 8,
	VO_STANDARD_PAL_NC = 9,
	VO_STANDARD_PAL_M = 10,
	VO_STANDARD_PAL_60 = 11,
	VO_STANDARD_SECAM = 12,
	VO_STANDARD_HDTV_720P_60 = 13,
	VO_STANDARD_HDTV_720P_50 = 14,
	VO_STANDARD_HDTV_720P_30 = 15,
	VO_STANDARD_HDTV_720P_25 = 16,
	VO_STANDARD_HDTV_720P_24 = 17,
	VO_STANDARD_HDTV_1080I_60 = 18,
	VO_STANDARD_HDTV_1080I_50 = 19,
	VO_STANDARD_HDTV_1080P_30 = 20,
	VO_STANDARD_HDTV_1080P_25 = 21,
	VO_STANDARD_HDTV_1080P_24 = 22,
	VO_STANDARD_VGA = 23,
	VO_STANDARD_SVGA = 24,
	VO_STANDARD_HDTV_1080P_60 = 25,
	VO_STANDARD_HDTV_1080P_50 = 26,
	VO_STANDARD_HDTV_1080I_59 = 27,
	VO_STANDARD_HDTV_720P_59 = 28,
	VO_STANDARD_HDTV_1080P_23 = 29,
	VO_STANDARD_HDTV_1080P_59 = 30,
	VO_STANDARD_HDTV_1080P_60_3D = 31,
	VO_STANDARD_HDTV_1080P_50_3D = 32,
	VO_STANDARD_HDTV_1080P_30_3D = 33,
	VO_STANDARD_HDTV_1080P_24_3D = 34,
	VO_STANDARD_HDTV_720P_60_3D = 35,
	VO_STANDARD_HDTV_720P_50_3D = 36,
	VO_STANDARD_HDTV_720P_30_3D = 37,
	VO_STANDARD_HDTV_720P_24_3D = 38,
	VO_STANDARD_HDTV_720P_59_3D = 39,
	VO_STANDARD_HDTV_1080I_60_3D = 40,
	VO_STANDARD_HDTV_1080I_59_3D = 41,
	VO_STANDARD_HDTV_1080I_50_3D = 42,
	VO_STANDARD_HDTV_1080P_23_3D = 43,
	VO_STANDARD_HDTV_4K2K_30 = 44,
	VO_STANDARD_HDTV_4K2K_24 = 45,
	VO_STANDARD_SDTV_800X600P_75 = 46,
	VO_STANDARD_HDTV_1280X1024P_85 = 47,
	VO_STANDARD_HDTV_1600X1200P_85 = 48,
};
typedef enum VO_STANDARD VO_STANDARD;

enum VO_PEDESTAL_TYPE {
	VO_PEDESTAL_TYPE_300_700_ON = 0,
	VO_PEDESTAL_TYPE_300_700_OFF = 1,
	VO_PEDESTAL_TYPE_286_714_ON = 2,
	VO_PEDESTAL_TYPE_286_714_OFF = 3,
};
typedef enum VO_PEDESTAL_TYPE VO_PEDESTAL_TYPE;

enum VO_TV_TYPE {
	VO_TV_TYPE_4_BY_3 = 0,
	VO_TV_TYPE_16_BY_9_FIXED = 1,
	VO_TV_TYPE_16_BY_9_AUTO = 2,
	VO_TV_TYPE_16_BY_10 = 3,
};
typedef enum VO_TV_TYPE VO_TV_TYPE;

enum VO_HDMI_MODE {
	VO_DVI_ON = 0,
	VO_HDMI_ON = 1,
	VO_MHL_ON = 2,
	VO_HDMI_OFF = 3,
};
typedef enum VO_HDMI_MODE VO_HDMI_MODE;

enum VO_HDMI_AUDIO_SAMPLE_FREQ {
	VO_HDMI_AUDIO_NULL = 0,
	VO_HDMI_AUDIO_32K = 1,
	VO_HDMI_AUDIO_44_1K = 2,
	VO_HDMI_AUDIO_48K = 3,
	VO_HDMI_AUDIO_88_2K = 4,
	VO_HDMI_AUDIO_96K = 5,
	VO_HDMI_AUDIO_176_4K = 6,
	VO_HDMI_AUDIO_192K = 7,
};
typedef enum VO_HDMI_AUDIO_SAMPLE_FREQ VO_HDMI_AUDIO_SAMPLE_FREQ;

enum VO_HDMI_COLOR_FMT {
	VO_HDMI_RGB444 = 0,
	VO_HDMI_YCbCr422 = 1,
	VO_HDMI_YCbCr444 = 2,
};
typedef enum VO_HDMI_COLOR_FMT VO_HDMI_COLOR_FMT;

enum VO_VBI_ASPECT_RATIO {
	VO_VBI_ASPECT_RATIO_RESEVED_0 = 0,
	VO_VBI_ASPECT_RATIO_14_BY_9_LB_CENTER = 0 + 1,
	VO_VBI_ASPECT_RATIO_14_BY_9_LB_TOP = 0 + 2,
	VO_VBI_ASPECT_RATIO_RESEVED_3 = 0 + 3,
	VO_VBI_ASPECT_RATIO_16_BY_9_LB_TOP = 0 + 4,
	VO_VBI_ASPECT_RATIO_RESEVED_5 = 0 + 5,
	VO_VBI_ASPECT_RATIO_RESEVED_6 = 0 + 6,
	VO_VBI_ASPECT_RATIO_16_BY_9 = 0 + 7,
	VO_VBI_ASPECT_RATIO_4_BY_3 = 0 + 8,
	VO_VBI_ASPECT_RATIO_RESEVED_9 = 0 + 9,
	VO_VBI_ASPECT_RATIO_RESEVED_10 = 0 + 10,
	VO_VBI_ASPECT_RATIO_16_BY_9_LB_CENTER = 0 + 11,
	VO_VBI_ASPECT_RATIO_RESEVED_12 = 0 + 12,
	VO_VBI_ASPECT_RATIO_LT_16_BY_9_LB_CENTER = 0 + 13,
	VO_VBI_ASPECT_RATIO_14_BY_9 = 0 + 14,
};
typedef enum VO_VBI_ASPECT_RATIO VO_VBI_ASPECT_RATIO;

enum VO_VBI_COPY_MODE {
	VO_VBI_COPY_MODE_COPY_FREE = 0,
	VO_VBI_COPY_MODE_RESERVE = 0 + 1,
	VO_VBI_COPY_MODE_COPY_ONCE = 0 + 2,
	VO_VBI_COPY_MODE_COPY_NONE = 0 + 3,
};
typedef enum VO_VBI_COPY_MODE VO_VBI_COPY_MODE;

enum VO_VBI_APS {
	VO_VBI_APS_OFF = 0,
	VO_VBI_APS_TYPE_1 = 0 + 1,
	VO_VBI_APS_TYPE_2 = 0 + 2,
	VO_VBI_APS_TYPE_3 = 0 + 3,
};
typedef enum VO_VBI_APS VO_VBI_APS;

enum VO_VBI_SUBTITLE_MODE {
	VO_VBI_SUBTITLE_MODE_NONE = 0,
	VO_VBI_SUBTITLE_MODE_INSIDE = 0 + 1,
	VO_VBI_SUBTITLE_MODE_OUTSIDE = 0 + 2,
	VO_VBI_SUBTITLE_MODE_RESERVED = 0 + 3,
};
typedef enum VO_VBI_SUBTITLE_MODE VO_VBI_SUBTITLE_MODE;

enum VO_VIDEO_PLANE {
	VO_VIDEO_PLANE_V1 = 0,
	VO_VIDEO_PLANE_V2 = 1,
	VO_VIDEO_PLANE_V3 = 2,
	VO_VIDEO_PLANE_SUB1 = 3,
	VO_VIDEO_PLANE_NONE = 255,
};
typedef enum VO_VIDEO_PLANE VO_VIDEO_PLANE;

enum VO_RESCALE_MODE {
	VO_RESCALE_MODE_KEEP_AR_AUTO = 0,
	VO_RESCALE_MODE_KEEP_AR_LB_CNTR = 1,
	VO_RESCALE_MODE_KEEP_AR_LB_TOP = 2,
	VO_RESCALE_MODE_KEEP_AR_PS_CNTR = 3,
	VO_RESCALE_MODE_KEEP_AR_PS_AUTO = 4,
	VO_RESCALE_MODE_FULL_SCALE = 5,
	VO_RESCALE_MODE_USER_DEFINE = 6,
	SCALER_SLR_RATIO_AUTO = 7,
	SCALER_SLR_RATIO_4_3 = 8,
	SCALER_SLR_RATIO_16_9 = 9,
	SCALER_SLR_RATIO_14_9 = 10,
	SCALER_SLR_RATIO_LETTERBOX = 11,
	SCALER_SLR_RATIO_PANORAMA = 12,
	SCALER_SLR_RATIO_FIT = 13,
	SCALER_SLR_RATIO_POINTTOPOINT = 14,
	SCALER_SLR_RATIO_BBY_AUTO = 15,
	SCALER_SLR_RATIO_BBY_NORMAL = 16,
	SCALER_SLR_RATIO_BBY_ZOOM = 17,
	SCALER_SLR_RATIO_BBY_WIDE_1 = 18,
	SCALER_SLR_RATIO_BBY_WIDE_2 = 19,
	SCALER_SLR_RATIO_BBY_CINEMA = 20,
	SCALER_SLR_RATIO_CUSTOM = 21,
	SCALER_SLR_ASPECT_RATIO_PERSON = 22,
	SCALER_SLR_ASPECT_RATIO_CAPTION = 23,
	SCALER_SLR_ASPECT_RATIO_MOVIE = 24,
	SCALER_SLR_ASPECT_RATIO_ZOOM = 25,
	SCALER_SLR_ASPECT_RATIO_100 = 26,
	SCALER_SLR_ASPECT_RATIO_SOURCE = 27,
	SCALER_SLR_RATIO_ZOOM_14_9 = 28,
	SCALER_SLR_RATIO_NATIVE = 29,
	SCALER_SLR_RATIO_15_9 = 30,
	SCALER_SLR_RATIO_85_48 = 31,
	SCALER_SLR_RATIO_5_4 = 32,
	SCALER_SLR_RATIO_16_10 = 33,
	SCALER_SLR_RATIO_DISABLE = 0xff,
};
typedef enum VO_RESCALE_MODE VO_RESCALE_MODE;

enum VO_DEINT_MODE {
	VO_DEINT_MODE_BOB = 0,
	VO_DEINT_MODE_WEAVE = 1,
	VO_DEINT_MODE_MADI = 2,
	VO_DEINT_MODE_MADI_SNGLDIR = 3,
	VO_DEINT_MODE_MCOMP = 4,
	VO_DEINT_MODE_FILM = 5,
	VO_DEINT_MODE_AUTO = 6,
};
typedef enum VO_DEINT_MODE VO_DEINT_MODE;

enum VO_OSD_LPF_TYPE {
	VO_OSD_LPF_TYPE_DROP = 0,
	VO_OSD_LPF_TYPE_FILTER = 1,
	VO_OSD_LPF_TYPE_AVERAGE = 2,
};
typedef enum VO_OSD_LPF_TYPE VO_OSD_LPF_TYPE;

enum VO_OSD_COLOR_FORMAT {
	VO_OSD_COLOR_FORMAT_2BIT = 0,
	VO_OSD_COLOR_FORMAT_4BIT = 1,
	VO_OSD_COLOR_FORMAT_8BIT = 2,
	VO_OSD_COLOR_FORMAT_RGB332 = 3,
	VO_OSD_COLOR_FORMAT_RGB565 = 4,
	VO_OSD_COLOR_FORMAT_ARGB1555 = 5,
	VO_OSD_COLOR_FORMAT_ARGB4444 = 6,
	VO_OSD_COLOR_FORMAT_ARGB8888 = 7,
	VO_OSD_COLOR_FORMAT_Reserved0 = 8,
	VO_OSD_COLOR_FORMAT_Reserved1 = 9,
	VO_OSD_COLOR_FORMAT_Reserved2 = 10,
	VO_OSD_COLOR_FORMAT_YCBCRA4444 = 11,
	VO_OSD_COLOR_FORMAT_YCBCRA8888 = 12,
	VO_OSD_COLOR_FORMAT_RGBA5551 = 13,
	VO_OSD_COLOR_FORMAT_RGBA4444 = 14,
	VO_OSD_COLOR_FORMAT_RGBA8888 = 15,
	VO_OSD_COLOR_FORMAT_420 = 16,
	VO_OSD_COLOR_FORMAT_422 = 17,
	VO_OSD_COLOR_FORMAT_RGB323 = 18,
	VO_OSD_COLOR_FORMAT_RGB233 = 19,
	VO_OSD_COLOR_FORMAT_RGB556 = 20,
	VO_OSD_COLOR_FORMAT_RGB655 = 21,
	VO_OSD_COLOR_FORMAT_RGB888 = 22,
	VO_OSD_COLOR_FORMAT_RGB565_LITTLE = 36,
	VO_OSD_COLOR_FORMAT_ARGB1555_LITTLE = 37,
	VO_OSD_COLOR_FORMAT_ARGB4444_LITTLE = 38,
	VO_OSD_COLOR_FORMAT_ARGB8888_LITTLE = 39,
	VO_OSD_COLOR_FORMAT_YCBCRA4444_LITTLE = 43,
	VO_OSD_COLOR_FORMAT_YCBCRA8888_LITTLE = 44,
	VO_OSD_COLOR_FORMAT_RGBA5551_LITTLE = 45,
	VO_OSD_COLOR_FORMAT_RGBA4444_LITTLE = 46,
	VO_OSD_COLOR_FORMAT_RGBA8888_LITTLE = 47,
	VO_OSD_COLOR_FORMAT_RGB556_LITTLE = 52,
	VO_OSD_COLOR_FORMAT_RGB655_LITTLE = 53,
	VO_OSD_COLOR_FORMAT_RGB888_LITTLE = 54,
};
typedef enum VO_OSD_COLOR_FORMAT VO_OSD_COLOR_FORMAT;

enum VO_OSD_RGB_ORDER {
	VO_OSD_COLOR_RGB = 0,
	VO_OSD_COLOR_BGR = 1,
	VO_OSD_COLOR_GRB = 2,
	VO_OSD_COLOR_GBR = 3,
	VO_OSD_COLOR_RBG = 4,
	VO_OSD_COLOR_BRG = 5,
};
typedef enum VO_OSD_RGB_ORDER VO_OSD_RGB_ORDER;

enum VO_GRAPHIC_PLANE {
	VO_GRAPHIC_OSD = 0,
	VO_GRAPHIC_SUB1 = 1,
	VO_GRAPHIC_SUB2 = 2,
	VO_GRAPHIC_OSD1 = 0,
	VO_GRAPHIC_OSD2 = 2,
	VO_GRAPHIC_OSD3 = 3,
	VO_GRAPHIC_OSD4 = 4,
	VO_GRAPHIC_OSD5 = 5,
	VO_GRAPHIC_INVALID = 6,
	VO_GRAPHIC_NUM = 6,
};
typedef enum VO_GRAPHIC_PLANE VO_GRAPHIC_PLANE;

enum VO_GRAPHIC_STORAGE_MODE {
	VO_GRAPHIC_BLOCK = 0,
	VO_GRAPHIC_SEQUENTIAL = 1,
};
typedef enum VO_GRAPHIC_STORAGE_MODE VO_GRAPHIC_STORAGE_MODE;

enum PVIN_MODE {
	PVIN_MODE_FIELD = 0,
	PVIN_MODE_FRAME = 1,
};
typedef enum PVIN_MODE PVIN_MODE;

struct VO_COLOR {
	u_char c1;
	u_char c2;
	u_char c3;
	u_char isRGB;
};
typedef struct VO_COLOR VO_COLOR;

struct VO_RECTANGLE {
	short x;
	short y;
	u_short width;
	u_short height;
};
typedef struct VO_RECTANGLE VO_RECTANGLE;

struct VO_SUBPIC_COLORMAP {
	u_char alpha3;
	u_char alpha2;
	u_char alpha1;
	u_char alpha0;
	u_char color3;
	u_char color2;
	u_char color1;
	u_char color0;
};
typedef struct VO_SUBPIC_COLORMAP VO_SUBPIC_COLORMAP;

enum SP_STREAM_TYPE {
	SP_DVD_TYPE = 0,
	SP_DIVX_TYPE = 1,
	SP_DIVX_MENU_TYPE = 2,
	SP_DVB_SUBTITLE_TYPE = 3,
	SP_DVB_TT_TYPE = 4,
	SP_ATSC_CC_TYPE = 5,
	SP_SRT_TYPE = 6,
	SP_SSA_TYPE = 7,
	SP_DIVX_XSUB_PLUS_TYPE = 8,
	SP_DVD_FOR_DIVX_TYPE = 9,
	SP_BD_SUBTITLE_TYPE = 10,
};
typedef enum SP_STREAM_TYPE SP_STREAM_TYPE;

enum ENUM_TVD_VIDEO_FORMAT {
	TVD_VIDEO_AUTO_DETECT = 0x00,
	TVD_VIDEO_ZNTSC = 0x01,
	TVD_VIDEO_ZNTSC_443 = 0x02,
	TVD_VIDEO_ZPAL_I = 0x03,
	TVD_VIDEO_ZPAL_M = 0x04,
	TVD_VIDEO_ZPAL_CN = 0x05,
	TVD_VIDEO_ZSECAM = 0x06,
	TVD_VIDEO_480P = 0x06 + 1,
	TVD_VIDEO_576P = 0x06 + 2,
	TVD_VIDEO_720P50 = 0x06 + 3,
	TVD_VIDEO_720P60 = 0x06 + 4,
	TVD_VIDEO_1080I50 = 0x06 + 5,
	TVD_VIDEO_1080I60 = 0x06 + 6,
	TVD_VIDEO_1080P50 = 0x06 + 7,
	TVD_VIDEO_1080P60 = 0x06 + 8,
};
typedef enum ENUM_TVD_VIDEO_FORMAT ENUM_TVD_VIDEO_FORMAT;

enum ENUM_TVD_INPUT_FORMAT {
	TVD_INFMT_CVBS0_TUNER = 0,
	TVD_INFMT_CVBS1 = 1,
	TVD_INFMT_CVBS2 = 2,
	TVD_INFMT_SVIDEO0 = 3,
	TVD_INFMT_SVIDEO1 = 4,
	TVD_INFMT_YPbPr0 = 5,
	TVD_INFMT_YPbPr1 = 6,
	TVD_INFMT_SCART = 7,
	TVD_INFMT_YPbPrM = 8,
	TVD_INFMT_SCART_CVBS = 9,
	TVD_INFMT_SCART_RGB = 10,
	TVD_INFMT_YPbPr2 = 11,
	TVD_INFMT_YPbPr3 = 12,
	TVD_INFMT_HDMI0 = 13,
	TVD_INFMT_HDMI1 = 14,
	TVD_INFMT_HDMI2 = 15,
	TVD_INFMT_HDMI3 = 16,
	TVD_INFMT_VGA0 = 17,
	TVD_INFMT_VGA1 = 18,
	TVD_INFMT_VODMA0 = 19,
	TVD_INFMT_VODMA1 = 20,
	TVD_INFMT_OSD0 = 21,
};
typedef enum ENUM_TVD_INPUT_FORMAT ENUM_TVD_INPUT_FORMAT;

enum ENUM_TVD_YC_SEP_MODE {
	TVD_YC_SEP_1D2D_ADAPTIVE = 0,
	TVD_YC_SEP_3D_ADAPTIVE = 0 + 1,
	TVD_YC_SEP_3D_FIXED = 0 + 2,
};
typedef enum ENUM_TVD_YC_SEP_MODE ENUM_TVD_YC_SEP_MODE;

enum ENUM_TVD_VBI_DATA {
	VBI_DATA_VPS = 0,
	VBI_DATA_CC = 1,
	VBI_DATA_CC_EXT = 2,
	VBI_DATA_TT = 3,
	VBI_DATA_TT_EXT = 4,
	VBI_DATA_WSS = 5,
	VBI_DATA_TIME = 6,
	VBI_DATA_CGMSA = 7,
	VBI_DATA_MACROVISION = 8,
};
typedef enum ENUM_TVD_VBI_DATA ENUM_TVD_VBI_DATA;

enum TVE_BOARD_TYPE {
	TVE_BOARD_CLASSIC_TYPE = 0,
	TVE_BOARD_EXTERNAL_SCART_TYPE = 1,
	TVE_BOARD_AVHDD_TYPE = 2,
	TVE_BOARD_CUSTOM_1_TYPE = 3,
	TVE_BOARD_CUSTOM_2_TYPE = 4,
	TVE_BOARD_CUSTOM_3_TYPE = 5,
	TVE_BOARD_CUSTOM_4_TYPE = 6,
	TVE_BOARD_CUSTOM_5_TYPE = 7,
	TVE_BOARD_CUSTOM_6_TYPE = 8,
	TVE_BOARD_CUSTOM_7_TYPE = 9,
	TVE_BOARD_CUSTOM_8_TYPE = 10,
	TVE_BOARD_CUSTOM_9_TYPE = 11,
};
typedef enum TVE_BOARD_TYPE TVE_BOARD_TYPE;

enum VIDEO_BUFFER_TYPE {
	VIDEO_BUFFER_SD = 0,
	VIDEO_BUFFER_HD = 1,
	VIDEO_BUFFER_HD_DIVX = 2,
	VIDEO_BUFFER_RM_CIF = 3,
	VIDEO_BUFFER_USER_DEFINE = 4,
	VIDEO_BUFFER_720P = 5,
	VIDEO_BUFFER_HD_MVC = 6,
	VIDEO_SUBPIC_RENDER_BUFFER_FULL = 16,
	VIDEO_SUBPIC_RENDER_BUFFER_HALF = 16 + 1,
	VIDEO_MEMORY_CONFIG_BASE = 32,
	VIDEO_MEMORY_CONFIG_720P = 32,
	VIDEO_MEMORY_CONFIG_720P_WITH_SCALER_BUFFER_3D = 32 + 1,
	VIDEO_MEMORY_CONFIG_HD = 32 + 2,
	VIDEO_MEMORY_CONFIG_HD_WITH_SCALER_BUFFER_3D = 32 + 3,
	VIDEO_MEMORY_CONFIG_HD_3D = 32 + 4,
	VIDEO_MEMORY_CONFIG_HD_SMOOTH_TOGGLE_FRC = 32 + 5,
	VIDEO_MEMORY_CONFIG_HD_SMOOTH_TOGGLE_FS = 32 + 6,
	VIDEO_MEMORY_CONFIG_SCALING_TO_FHD = 32 + 7,
	VIDEO_MEMORY_CONFIG_HD_SMOOTH_TOGGLE_FS_NO_MEMORY = 32 + 8,
};
typedef enum VIDEO_BUFFER_TYPE VIDEO_BUFFER_TYPE;

enum VIDEO_DNR_MODE {
	VIDEO_DNR_OFF = 0,
	VIDEO_DNR_AUTO = 1,
	VIDEO_DNR_DEMO = 2,
};
typedef enum VIDEO_DNR_MODE VIDEO_DNR_MODE;

enum VIDEO_CODEC_CONTROL_BIT {
	VIDEO_MPEG2_ENCODER_BIT = 41,
	VIDEO_MPEG4_ENCODER_BIT = 42,
	VIDEO_MPEG2_DECODER_BIT = 43,
	VIDEO_MPEG4_DECODER_BIT = 44,
	VIDEO_DIVX_DECODER_BIT = 45,
	VIDEO_REALVIDEO_DECODER_BIT = 46,
	VIDEO_H263_DECODER_BIT = 47,
	VIDEO_MJPEG_DECODER_BIT = 48,
	VIDEO_H264_DECODER_BIT = 49,
	VIDEO_VC1_DECODER_BIT = 50,
	VIDEO_FJPEG_DECODER_BIT = 51,
	VIDEO_H264lv51_DECODER_BIT = 52,
};
typedef enum VIDEO_CODEC_CONTROL_BIT VIDEO_CODEC_CONTROL_BIT;

enum VIDEO_PHOTO_DEC_JPEG_CTRL {
	JPEG_ENABLE = 0,
	JPEG_DISABLE = 1,
	JPEG_NO_PROGRESSIVE = 2,
};
typedef enum VIDEO_PHOTO_DEC_JPEG_CTRL VIDEO_PHOTO_DEC_JPEG_CTRL;

enum VIDEO_PHOTO_DEC_BITMAP_CTRL {
	BITMAP_ENABLE = 0,
	BITMAP_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_BITMAP_CTRL VIDEO_PHOTO_DEC_BITMAP_CTRL;

enum VIDEO_PHOTO_DEC_TIFF_CTRL {
	TIFF_ENABLE = 0,
	TIFF_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_TIFF_CTRL VIDEO_PHOTO_DEC_TIFF_CTRL;

enum VIDEO_PHOTO_DEC_GIF_CTRL {
	GIF_ENABLE = 0,
	GIF_DISABLE = 1,
	GIF_NO_ANIMATION = 2,
};
typedef enum VIDEO_PHOTO_DEC_GIF_CTRL VIDEO_PHOTO_DEC_GIF_CTRL;

enum VIDEO_PHOTO_DEC_PNG_CTRL {
	PNG_ENABLE = 0,
	PNG_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_PNG_CTRL VIDEO_PHOTO_DEC_PNG_CTRL;

enum VIDEO_PHOTO_DEC_WEBP_CTRL {
	WEBP_ENABLE = 0,
	WEBP_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_WEBP_CTRL VIDEO_PHOTO_DEC_WEBP_CTRL;

enum VIDEO_PHOTO_DEC_PSEUDOIMG_CTRL {
	PSEUDOIMG_ENABLE = 0,
	PSEUDOIMG_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_PSEUDOIMG_CTRL VIDEO_PHOTO_DEC_PSEUDOIMG_CTRL;

enum VIDEO_PHOTO_DEC_HEIF_CTRL {
	HEIF_ENABLE = 0,
	HEIF_DISABLE = 1,
};
typedef enum VIDEO_PHOTO_DEC_HEIF_CTRL VIDEO_PHOTO_DEC_HEIF_CTRL;

struct MIXER_WIN {
	u_char winID;
	short order;
	short alpha;
	struct VO_RECTANGLE dispWin;
	struct VO_RECTANGLE clipSrcWin;
};
typedef struct MIXER_WIN MIXER_WIN;

enum YUV_FMT {
	FMT_YUYV = 0,
	FMT_UYVY = 1,
	FMT_YUV420 = 2,
	FMT_YUV422P = 3,
	FMT_M_DOMAIN = 4,
	FMT_YV12 = 5,
	FMT_NV12 = 6,
	FMT_BGRA_8888 = 7,
	FMT_YUV420P = 8,
	FMT_REFRECORD = 9,
	FMT_RGBA_8888 = 10,
	FMT_RGB_888 = 11,
};
typedef enum YUV_FMT YUV_FMT;

enum CAP_FRAME_FMT {
	CAP_FRAME_NONE = 0,
	CAP_FRAME_YUV420 = 1,
	CAP_FRAME_RGBA8888 = 2,
};
typedef enum CAP_FRAME_FMT CAP_FRAME_FMT;

enum CAP_IN_SEL {
	NO_INPUT = 0,
	MAIN_UZU = 1,
	SUB_MIXER = 2,
	OSD_MIXER1 = 3,
	OSD_MIXER2 = 4,
	MAIN_UZU_FOR_DETECT = 8,
};
typedef enum CAP_IN_SEL CAP_IN_SEL;

enum VIDEO_ENC_PROFILE {
	VIDEO_PROFILE_BASELINE = 0,
	VIDEO_PROFILE_MAIN = 1,
	VIDEO_PROFILE_HIGH = 2,
};
typedef enum VIDEO_ENC_PROFILE VIDEO_ENC_PROFILE;

enum VO_CHROMA_FMT {
	VO_CHROMA_YUV420 = 0,
	VO_CHROMA_YUV422 = 0 + 1,
	VO_CHROMA_YUV444 = 0 + 2,
	VO_CHROMA_ARGB8888 = 0 + 3,
	VO_CHROMA_RGB888 = 0 + 4,
	VO_CHROMA_RGB565 = 0 + 5,
	VO_CHROMA_YUV411 = 0 + 6,
};
typedef enum VO_CHROMA_FMT VO_CHROMA_FMT;

enum VO_3D_MODE_TYPE {
	VO_2D_MODE = 0,
	VO_3D_SIDE_BY_SIDE_HALF = 0 + 1,
	VO_3D_TOP_AND_BOTTOM = 0 + 2,
	VO_3D_FRAME_PACKING = 0 + 3,
	VO_3D_LINE_BY_LINE = 0 + 4,
	VO_3D_VERTICAL_STRIPE = 0 + 5,
	VO_3D_CHECKER_BOARD = 0 + 6,
	VO_3D_REALID = 0 + 7,
	VO_3D_SENSIO = 0 + 8,
	VO_3D_AUTO = 0 + 9,
	VO_3D_MVC_SBS = 0 + 10,
	VO_3D_2DTO3D = 0 + 11,
};
typedef enum VO_3D_MODE_TYPE VO_3D_MODE_TYPE;

enum VO_3D_OUTPUT_MODE {
	VO_3D_OUTPUT_ORIGINAL = 0,
	VO_3D_OUTPUT_LR_SEQUENCE = 0 + 1,
};
typedef enum VO_3D_OUTPUT_MODE VO_3D_OUTPUT_MODE;

enum VO_FORCE2D_MODE {
	VO_FORCE2D_DISABLE = 0,
	VO_FORCE2D_LEFT = 0 + 1,
	VO_FORCE2D_RIGHT = 0 + 2,
};
typedef enum VO_FORCE2D_MODE VO_FORCE2D_MODE;

enum PANEL_3D_TYPE {
	PANEL_TYPE_PR = 0,
	PANEL_TYPE_SG = 0 + 1,
};
typedef enum PANEL_3D_TYPE PANEL_3D_TYPE;

enum VO_SOURCE_TYPE {
	VO_SOURCE_TYPE_PLAYBACK = 0,
	VO_SOURCE_TYPE_DTV = 0 + 1,
};
typedef enum VO_SOURCE_TYPE VO_SOURCE_TYPE;

enum VO_FORCEBG_TYPE {
	VO_FORCEBG_TYPE_HIDECHANNEL = 1,
	VO_FORCEBG_TYPE_SETVOINFO = 2,
	VO_FORCEBG_TYPE_DTVSPATUPDATE = 4,
	VO_FORCEBG_TYPE_DTVRESETCLKGEN = 8,
	VO_FORCEBG_TYPE_FLUSHVIDEOOUT = 16,
};
typedef enum VO_FORCEBG_TYPE VO_FORCEBG_TYPE;

enum VO_SCALER_AR_MODE {
	VO_SCALER_AR_ORIGINAL = 0,
	VO_SCALER_AR_1080I_BBY_ZOOM = 0 + 1,
	VO_SCALER_AR_1080I_BBY_CINEMA = 0 + 2,
	VO_SCALER_AR_AUTO_AFD = 0 + 3,
	VO_SCALER_AR_PERSON = 0 + 4,
	VO_SCALER_AR_CAPTION = 0 + 5,
	VO_SCALER_AR_MOVIE = 0 + 6,
	VO_SCALER_AR_ZOOM = 0 + 7,
	VO_SCALER_AR_ZOOM2 = 0 + 8,
	VO_SCALER_AR_ZOOM3 = 0 + 9,
	VO_SCALER_AR_CUSTOMER = 0 + 10,
};
typedef enum VO_SCALER_AR_MODE VO_SCALER_AR_MODE;

enum VO_4K2K_MODE_TYPE {
	VO_4K2K_NATIVE_MODE = 0,
	VO_4K2K_PHOTO_MODE = 0 + 1,
	VO_4K2K_VIDEO_MODE = 0 + 2,
	VO_4K2K_HDMI_MODE = 0 + 3,
};
typedef enum VO_4K2K_MODE_TYPE VO_4K2K_MODE_TYPE;

enum OSD_4K2K_MODE_TYPE {
	OSD_4K2K_NATIVE_MODE = 0,
	OSD_4K2K_CORNER_MODE = 0 + 1,
	OSD_4K2K_SCALEUP_MODE = 0 + 2,
	OSD_4K2K_QUARTER4K_MODE = 0 + 3,
};
typedef enum OSD_4K2K_MODE_TYPE OSD_4K2K_MODE_TYPE;

enum VO_HACK_CANVAS_MODE {
	VO_HACK_CANVAS_MODE_DISABLE = 0,
	VO_HACK_CANVAS_MODE_FIT_MAINACT = 0 + 1,
	VO_HACK_CANVAS_MODE_FIT_DEN = 0 + 2,
};
typedef enum VO_HACK_CANVAS_MODE VO_HACK_CANVAS_MODE;

enum DIRECT_VO_FRAME_QUEUE_SIZE_VALUE {
	DIRECT_VO_FRAME_QUEUE_SIZE = 64,
};
typedef enum DIRECT_VO_FRAME_QUEUE_SIZE_VALUE DIRECT_VO_FRAME_QUEUE_SIZE_VALUE;

enum DIRECT_VO_FRAME_FORMAT {
	DIRECT_VO_FRAME_FORMAT_RGBA_8888 = 0x01,
	DIRECT_VO_FRAME_FORMAT_BGRA_8888 = 0x02,
	DIRECT_VO_FRAME_FORMAT_RGB_888 = 0x03,
	DIRECT_VO_FRAME_FORMAT_YCBCR_444_I = 0x04,
	DIRECT_VO_FRAME_FORMAT_YCBCR_422_I = 0x05,
	DIRECT_VO_FRAME_FORMAT_YCBCR_411_I = 0x06,
	DIRECT_VO_FRAME_FORMAT_YCBCR_420_P = 0x07,
};
typedef enum DIRECT_VO_FRAME_FORMAT DIRECT_VO_FRAME_FORMAT;

enum DIRECT_VO_FRAME_LAYOUT {
	DIRECT_VO_FRAME_LAYOUT_SEQUENCE = 0x01,
	DIRECT_VO_FRAME_LAYOUT_BLOCK = 0x02,
	DIRECT_VO_FRAME_LAYOUT_BLOCK_ZERO_COPY = 0x03,
};
typedef enum DIRECT_VO_FRAME_LAYOUT DIRECT_VO_FRAME_LAYOUT;

enum DIRECT_VO_FRAME_SCAN_MODE {
	DIRECT_VO_FRAME_SCAN_MODE_INTERLACE = 0x01,
	DIRECT_VO_FRAME_SCAN_MODE_PROGRESSIVE = 0x02,
};
typedef enum DIRECT_VO_FRAME_SCAN_MODE DIRECT_VO_FRAME_SCAN_MODE;

enum DIRECT_VO_FRAME_CLOCK_TYPE {
	DIRECT_VO_FRAME_CLOCK_TYPE_FREERUN = 0x00,
	DIRECT_VO_FRAME_CLOCK_TYPE_PLAYER = 0x01,
	DIRECT_VO_FRAME_CLOCK_TYPE_AUDIO = 0x02,
	DIRECT_VO_FRAME_CLOCK_TYPE_VIDEO = 0x03,
	DIRECT_VO_FRAME_CLOCK_TYPE_LOW_DELAY = 0x04,
	DIRECT_VO_FRAME_CLOCK_TYPE_LOW_BUFFER = 0x05,
	DIRECT_VO_FRAME_CLOCK_TYPE_LOW_DELAY_SMOOTH = 0x06,
	DIRECT_VO_FRAME_CLOCK_TYPE_VIDEO_TUNNEL = 0x07,
	DIRECT_VO_FRAME_CLOCK_TYPE_REFCLOCK = 0x08,
};
typedef enum DIRECT_VO_FRAME_CLOCK_TYPE DIRECT_VO_FRAME_CLOCK_TYPE;

enum DIRECT_VO_FRAME_FLAG {
	DIRECT_VO_FRAME_FLAG_NONE = 0x00,
	DIRECT_VO_FRAME_FLAG_AFTER_FLUSH = 0x01,
	DIRECT_VO_FRAME_FLAG_FIRST_FRAME = 0x02,
	DIRECT_VO_FRAME_FLAG_EOS = 0x04,
	DIRECT_VO_FRAME_FLAG_DISCARD = 0x08,
	DIRECT_VO_FRAME_FLAG_NOT_SHOW_PREROLL = 0x10,
};
typedef enum DIRECT_VO_FRAME_FLAG DIRECT_VO_FRAME_FLAG;

enum DIRECT_VO_FRAME_3D_TYPE {
	DIRECT_VO_FRAME_3D_TYPE_2D = 0,
	DIRECT_VO_FRAME_3D_TYPE_SIDEBYSIDE_HALF_LR = 1,
	DIRECT_VO_FRAME_3D_TYPE_SIDEBYSIDE_HALF_RL = 2,
	DIRECT_VO_FRAME_3D_TYPE_TOP_BOTTOM_LR = 3,
	DIRECT_VO_FRAME_3D_TYPE_TOP_BOTTOM_RL = 4,
	DIRECT_VO_FRAME_3D_TYPE_CHECKER_BOARD = 5,
	DIRECT_VO_FRAME_3D_TYPE_FRAME_SEQ = 6,
	DIRECT_VO_FRAME_3D_TYPE_COLUMN_INTERLEAVE = 7,
	DIRECT_VO_FRAME_3D_TYPE_SIDEBYSIDE_FULL_LR = 8,
	DIRECT_VO_FRAME_3D_TYPE_SIDEBYSIDE_FULL_RL = 9,
	DIRECT_VO_FRAME_3D_TYPE_FRAME_PACKING = 10,
	DIRECT_VO_FRAME_3D_TYPE_FIELD_ALTERNATIVE = 11,
	DIRECT_VO_FRAME_3D_TYPE_LINE_ALTERNATIVE = 12,
	DIRECT_VO_FRAME_3D_TYPE_DUALSTREAM = 13,
	DIRECT_VO_FRAME_3D_TYPE_2DTO3D = 14,
	DIRECT_VO_FRAME_3D_TYPE_MAX = 15,
};
typedef enum DIRECT_VO_FRAME_3D_TYPE DIRECT_VO_FRAME_3D_TYPE;

enum VSGEN_IV_SRC {
	VSGEN_IV_SRC_SEL_PIXELCLOCK = 0,
	VSGEN_IV_SRC_SEL_MAINIVS = 0 + 1,
	VSGEN_IV_SRC_SEL_MAINDVS = 0 + 2,
	VSGEN_IV_SRC_SEL_HDMIDMAVS = 0 + 3,
	VSGEN_IV_SRC_SEL_MANUALVS = 0 + 4,
	VSGEN_IV_SRC_SEL_HDMITXVS = 0 + 5,
	VSGEN_IV_SRC_SEL_TVEPVS = 0 + 6,
	VSGEN_IV_SRC_SEL_TVEIVS = 0 + 7,
};
typedef enum VSGEN_IV_SRC VSGEN_IV_SRC;

enum VIDEO_RESOURCE_CORE_TYPE {
	VIDEO_RESOURCE_CORE_REALTEK = 0,
	VIDEO_RESOURCE_CORE_GOOGLE = 0 + 1,
	VIDEO_RESOURCE_CORE_IP1 = 0 + 2,
	VIDEO_RESOURCE_CORE_IP2 = 0 + 3,
	VIDEO_RESOURCE_CORE_DUAL = 0 + 4,
};
typedef enum VIDEO_RESOURCE_CORE_TYPE VIDEO_RESOURCE_CORE_TYPE;

enum VIDEO_RENDER_MODE_TYPE {
	VIDEO_RENDER_MODE_VIDEO = 0,
	VIDEO_RENDER_MODE_GRAPHIC = 0 + 1,
};
typedef enum VIDEO_RENDER_MODE_TYPE VIDEO_RENDER_MODE_TYPE;

enum VIDEO_RESOURCE_CTRL_TYPE {
	VIDEO_RESOURCE_CTRL_ADD = 0,
	VIDEO_RESOURCE_CTRL_DEL = 0 + 1,
	VIDEO_RESOURCE_CTRL_UPDATE = 0 + 2,
};
typedef enum VIDEO_RESOURCE_CTRL_TYPE VIDEO_RESOURCE_CTRL_TYPE;

enum VO_VSC_SRC_TYPE {
	VO_VSC_SRC_VDEC = 0,
	VO_VSC_SRC_JPEG = 0 + 1,
	VO_VSC_SRC_HDMI = 0 + 2,
};
typedef enum VO_VSC_SRC_TYPE VO_VSC_SRC_TYPE;

enum DIRECT_VO_FRAME_ORIENTATION {
	DIRECT_VO_FRAME_ORIENTATION_ROTATE_0 = 0x00,
	DIRECT_VO_FRAME_ORIENTATION_ROTATE_90 = 0x01,
	DIRECT_VO_FRAME_ORIENTATION_ROTATE_180 = 0x02,
	DIRECT_VO_FRAME_ORIENTATION_ROTATE_270 = 0x03,
	DIRECT_VO_FRAME_ORIENTATION_FLIP_ROTATE_0 = 0x04,
	DIRECT_VO_FRAME_ORIENTATION_FLIP_ROTATE_90 = 0x05,
	DIRECT_VO_FRAME_ORIENTATION_FLIP_ROTATE_180 = 0x06,
	DIRECT_VO_FRAME_ORIENTATION_FLIP_ROTATE_270 = 0x07,
	DIRECT_VO_FRAME_ORIENTATION_DEFAULT = 0x08,
};
typedef enum DIRECT_VO_FRAME_ORIENTATION DIRECT_VO_FRAME_ORIENTATION;

enum RPC_VODMA_DDOMAIN_CHROMA_FMT {
	RPC_FMT_444 = 0,
	RPC_FMT_422 = 0 + 1,
	RPC_FMT_420 = 0 + 2,
};
typedef enum RPC_VODMA_DDOMAIN_CHROMA_FMT RPC_VODMA_DDOMAIN_CHROMA_FMT;

enum RPC_SLR_AFD_TYPE {
	RPC_SLR_AFD_RESERVE1 = 0,
	RPC_SLR_AFD_RESERVE2 = 0 + 1,
	RPC_SLR_AFD_BOX_16X9 = 0 + 2,
	RPC_SLR_AFD_BOX_14X9 = 0 + 3,
	RPC_SLR_AFD_BOX_G16X9 = 0 + 4,
	RPC_SLR_AFD_RESERVE3 = 0 + 5,
	RPC_SLR_AFD_RESERVE4 = 0 + 6,
	RPC_SLR_AFD_RESERVE5 = 0 + 7,
	RPC_SLR_AFD_SAME_AS_FRAME = 0 + 8,
	RPC_SLR_AFD_4X3 = 0 + 9,
	RPC_SLR_AFD_16X9 = 0 + 10,
	RPC_SLR_AFD_14X9 = 0 + 11,
	RPC_SLR_AFD_RESERVE6 = 0 + 12,
	RPC_SLR_AFD_4X3_SP = 0 + 13,
	RPC_SLR_AFD_16X9_SP = 0 + 14,
	RPC_SLR_AFD_16X9_SP_4X3 = 0 + 15,
};
typedef enum RPC_SLR_AFD_TYPE RPC_SLR_AFD_TYPE;

enum HDR_TYPE {
	HDR_NONE = 0,
	HDR_HDR10 = 0 + 1,
	HDR_HLG = 0 + 2,
	HDR_PRIME = 0 + 3,
	HDR_DOLBY = 0 + 4,
	HDR_TC = 0 + 5,
	HDR_HDR10_PLUS = 0 + 6,
};
typedef enum HDR_TYPE HDR_TYPE;

enum VO_APP_TYPE {
	VO_APP_TYPE_NONE = 0,
	VO_APP_TYPE_NETFLIX = 1,
	VO_APP_TYPE_YOUTUBE = 2,
};
typedef enum VO_APP_TYPE VO_APP_TYPE;

enum HAL_VO_P_STATE_T {
	HAL_VO_P_STATE_OK = 0,
	HAL_VO_P_STATE_ERROR = 0 + 1,
	HAL_VO_P_STATE_INVALID_PARAM = 0 + 2,
	HAL_VO_P_STATE_NOT_AVAILABLE = 0 + 3,
	HAL_VO_P_STATE_NOT_CALLABLE = 0 + 4,
	HAL_VO_P_STATE_ERR_LENGTH = 0 + 5,
	HAL_VO_P_STATE_TIMEOUT = 0 + 6,
	HAL_VO_P_STATE_OBJ_DELETED = 0 + 7,
};
typedef enum HAL_VO_P_STATE_T HAL_VO_P_STATE_T;

enum HAL_VO_P_PIXEL_FORMAT {
	HAL_VO_P_PIXEL_FORMAT_NONE = 0,
	HAL_VO_P_PIXEL_FORMAT_PALETTE = 0 + 1,
	HAL_VO_P_PIXEL_FORMAT_GRAYSCALE = 0 + 2,
	HAL_VO_P_PIXEL_FORMAT_RGB = 0 + 3,
	HAL_VO_P_PIXEL_FORMAT_BGR = 0 + 4,
	HAL_VO_P_PIXEL_FORMAT_ARGB = 0 + 5,
	HAL_VO_P_PIXEL_FORMAT_ABGR = 0 + 6,
	HAL_VO_P_PIXEL_FORMAT_YUV444P = 0 + 7,
	HAL_VO_P_PIXEL_FORMAT_YUV444I = 0 + 8,
	HAL_VO_P_PIXEL_FORMAT_YUV422P = 0 + 9,
	HAL_VO_P_PIXEL_FORMAT_YUV422I = 0 + 10,
	HAL_VO_P_PIXEL_FORMAT_YUV422YUYV = 0 + 11,
	HAL_VO_P_PIXEL_FORMAT_YUV420P = 0 + 12,
	HAL_VO_P_PIXEL_FORMAT_YUV420I = 0 + 13,
	HAL_VO_P_PIXEL_FORMAT_YUV400 = 0 + 14,
	HAL_VO_P_PIXEL_FORMAT_YUV224P = 0 + 15,
	HAL_VO_P_PIXEL_FORMAT_YUV224I = 0 + 16,
	HAL_VO_P_PIXEL_FORMAT_YUV444SP = 0 + 17,
	HAL_VO_P_PIXEL_FORMAT_ALPHAGRAYSCALE = 0 + 18,
	HAL_VO_P_PIXEL_FORMAT_MAX = 0 + 19,
};
typedef enum HAL_VO_P_PIXEL_FORMAT HAL_VO_P_PIXEL_FORMAT;

enum HAL_VO_P_PANEL_TYPE {
	HAL_VO_P_PANEL_TYPE_NONE = 0,
	HAL_VO_P_PANEL_TYPE_FHD = 0 + 1,
	HAL_VO_P_PANEL_TYPE_UHD = 0 + 2,
	HAL_VO_P_PANEL_TYPE_HD1024X768 = 0 + 3,
	HAL_VO_P_PANEL_TYPE_HD1280X720 = 0 + 4,
	HAL_VO_P_PANEL_TYPE_HD1366X768 = 0 + 5,
	HAL_VO_P_PANEL_TYPE_MAX = 0 + 6,
};
typedef enum HAL_VO_P_PANEL_TYPE HAL_VO_P_PANEL_TYPE;

enum HAL_VO_P_CFG_TYPE {
	HAL_VO_P_CFG_TYPE_NONE = 0,
	HAL_VO_P_CFG_TYPE_ALPHA_BLEND = 0 + 1,
	HAL_VO_P_CFG_TYPE_PIXEL_FORMAT = 0 + 2,
	HAL_VO_P_CFG_TYPE_INPUT_RECT = 0 + 3,
	HAL_VO_P_CFG_TYPE_OUTPUT_RECT = 0 + 4,
	HAL_VO_P_CFG_TYPE_MAX = 0 + 5,
};
typedef enum HAL_VO_P_CFG_TYPE HAL_VO_P_CFG_TYPE;

enum HAL_VO_P_SUPPORT_PIXEL_FORMAT_T {
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_NONE = 0x00000000,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_PALETTE = 0x00000001,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_GRAYSCALE = 0x00000002,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_RGB = 0x00000004,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_BGR = 0x00000008,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_ARGB = 0x00000010,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_ABGR = 0x00000020,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV444P = 0x00000040,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV444I = 0x00000080,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV422P = 0x00000100,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV422I = 0x00000200,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV422YUYV = 0x00000400,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV420P = 0x00000800,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV420I = 0x00001000,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV400 = 0x00002000,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV224P = 0x00004000,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV224I = 0x00008000,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_YUV444SP = 0x00010000,
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_ALPHAGRAYSCALE = 0x00020000,
};
typedef enum HAL_VO_P_SUPPORT_PIXEL_FORMAT_T HAL_VO_P_SUPPORT_PIXEL_FORMAT_T;

enum HAL_VO_P_SUPPORT_PANEL_TYPE_T {
	HAL_VO_P_SUPPORT_PANEL_TYPE_NONE = 0x00000000,
	HAL_VO_P_SUPPORT_PANEL_TYPE_HD1024X768 = 0x00000001,
	HAL_VO_P_SUPPORT_PANEL_TYPE_HD1280X720 = 0x00000002,
	HAL_VO_P_SUPPORT_PANEL_TYPE_HD1366X768 = 0x00000004,
	HAL_VO_P_SUPPORT_PANEL_TYPE_FHD = 0x00000008,
	HAL_VO_P_SUPPORT_PANEL_TYPE_UHD = 0x00000010,
};
typedef enum HAL_VO_P_SUPPORT_PANEL_TYPE_T HAL_VO_P_SUPPORT_PANEL_TYPE_T;

enum HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_T {
	HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_NONE = 0x00000000,
	HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_COLORSPACE = 0x00000001,
	HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_ALPHABLENDING = 0x00000002,
	HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_INPUTRECT = 0x00000004,
	HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_OUTPUTRECT = 0x00000008,
};
typedef enum HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_T HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_T;

#endif /* !_VIDEORPCBASEDS_DATA_H_RPCGEN */
