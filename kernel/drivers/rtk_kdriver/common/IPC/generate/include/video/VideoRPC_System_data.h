/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VIDEORPC_SYSTEM_DATA_H_RPCGEN
#define _VIDEORPC_SYSTEM_DATA_H_RPCGEN

#include <RPCBaseDS.h>
#include <VideoRPCBaseDS.h>

struct VIDEO_INIT_DATA {
	enum TVE_BOARD_TYPE boardType;
};
typedef struct VIDEO_INIT_DATA VIDEO_INIT_DATA;

struct VIDEO_CONFIG_DATA {
	enum VIDEO_BUFFER_TYPE videoBufferType;
};
typedef struct VIDEO_CONFIG_DATA VIDEO_CONFIG_DATA;

struct VIDEO_RPC_INSTANCE {
	enum VIDEO_VF_TYPE type;
};
typedef struct VIDEO_RPC_INSTANCE VIDEO_RPC_INSTANCE;

struct VIDEO_RPC_PVIN_INIT {
	long instanceID;
	enum PVIN_MODE mode;
	char path[64];
	int max_pic_count;
	int period;
	int width;
	int height;
};
typedef struct VIDEO_RPC_PVIN_INIT VIDEO_RPC_PVIN_INIT;

struct VIDEO_RPC_PVIN_SCHEDULE_EOS {
	long instanceID;
	int frame_number_after;
};
typedef struct VIDEO_RPC_PVIN_SCHEDULE_EOS VIDEO_RPC_PVIN_SCHEDULE_EOS;

struct VIDEO_RPC_MUX_SET_FILE {
	long instanceID;
	char fname[64];
};
typedef struct VIDEO_RPC_MUX_SET_FILE VIDEO_RPC_MUX_SET_FILE;

struct VIDEO_RPC_PVOUT_INIT {
	long instanceID;
	long frame_width;
	long frame_height;
	long max_pic_count;
};
typedef struct VIDEO_RPC_PVOUT_INIT VIDEO_RPC_PVOUT_INIT;

struct VIDEO_RPC_SET_REFCLOCK {
	long instanceID;
	long pRefClock;
};
typedef struct VIDEO_RPC_SET_REFCLOCK VIDEO_RPC_SET_REFCLOCK;

struct VIDEO_RPC_REQUEST_BUFFER {
	long width;
	long height;
};
typedef struct VIDEO_RPC_REQUEST_BUFFER VIDEO_RPC_REQUEST_BUFFER;

struct VIDEO_RPC_LOW_DELAY {
	enum VIDEO_LOW_DELAY mode;
	long instanceID;
};
typedef struct VIDEO_RPC_LOW_DELAY VIDEO_RPC_LOW_DELAY;

struct VIDEO_RPC_SET_SCALE {
	u_int Divx_Certify;
	u_int targetWidth;
	u_int targetHeight;
};
typedef struct VIDEO_RPC_SET_SCALE VIDEO_RPC_SET_SCALE;

struct VIDEO_RPC_DEC_SET_SPEED {
	long instanceID;
	long displaySpeed;
	long decodeSkip;
};
typedef struct VIDEO_RPC_DEC_SET_SPEED VIDEO_RPC_DEC_SET_SPEED;

struct VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL {
	long instanceID;
	long errConcealmentLevel;
};
typedef struct VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL;

struct VIDEO_RPC_DEC_INIT {
	long instanceID;
	VIDEO_STREAM_TYPE type;
	struct VIDEO_RPC_DEC_SET_SPEED set_speed;
};
typedef struct VIDEO_RPC_DEC_INIT VIDEO_RPC_DEC_INIT;

struct VIDEO_RPC_DEC_SET_DEBLOCK {
	long instanceID;
	u_char enable;
};
typedef struct VIDEO_RPC_DEC_SET_DEBLOCK VIDEO_RPC_DEC_SET_DEBLOCK;

struct VIDEO_RPC_DEC_BITSTREAM_BUFFER {
	enum VIDEO_VF_TYPE type;
	long bsBase;
	long bsSize;
};
typedef struct VIDEO_RPC_DEC_BITSTREAM_BUFFER VIDEO_RPC_DEC_BITSTREAM_BUFFER;

struct VIDEO_RPC_DEC_BV_RESULT {
	long bitRate;
	long type;
};
typedef struct VIDEO_RPC_DEC_BV_RESULT VIDEO_RPC_DEC_BV_RESULT;

struct VIDEO_RPC_DEC_PV_RESULT {
	u_int width;
	u_int height;
};
typedef struct VIDEO_RPC_DEC_PV_RESULT VIDEO_RPC_DEC_PV_RESULT;

struct VIDEO_RPC_DEC_SEQ_INFO {
	long hor_size;
	long ver_size;
	long aspect_ratio;
	long frame_rate;
	long bit_rate;
	long vbv_buf_size;
	long profile_level;
	long chroma_format;
	long video_format;
	long disp_hor_size;
	long disp_ver_size;
	long isProg;
	long isMVC;
	long is4k2k_MVC;
	long isREALD;
	long prog_sequence;
	long pic_type;
	long temp_ref;
	long pic_struct;
	long top_ff;
	long rept_ff;
	u_char video_full_range_flag;
	u_char transfer_characteristics;
	u_char matrix_coefficiets;
	u_char colour_primaries;
	u_short display_primaries_x[3];
	u_short display_primaries_y[3];
	u_short white_point_x;
	u_short white_point_y;
	u_int min_display_mastering_luminance;
	u_int max_display_mastering_luminance;
	u_int MaxSpeed;
	u_char hdr_type;
};
typedef struct VIDEO_RPC_DEC_SEQ_INFO VIDEO_RPC_DEC_SEQ_INFO;

struct VIDEO_RPC_DEC_MPEG_SEQ_HDR {
	long instanceID;
	u_long C_prog_seq;
	u_long C_aspect_ratio;
	u_long C_intra_QM;
	u_long C_non_intra_QM;
	u_long H_hor_size;
	u_long H_ver_size;
	u_long H_disp_hor_size;
	u_long H_disp_ver_size;
	u_long H_frame_rate;
	u_long L_frame_PTSinc;
	u_long L_bit_rate;
	u_long C_Mpeg1;
	u_long active_format;
	u_long L_Num_Pics;
	u_short H_vop_time_increment_resolution;
	u_short H_size_vop_time_increment;
	u_char C_complexity_estimation_disable;
	u_char C_resync_marker_disable;
	u_char C_quant_type;
	u_char C_quarter_sample;
	char C_intra_QM_MPEG4;
	char C_non_intra_QM_MPEG4;
	u_long L_define_vop_comp_est_hdr;
	u_long saveBuf;
	u_char Seq_Intra_QM[64];
	u_char Seq_Non_Intra_QM[64];
};
typedef struct VIDEO_RPC_DEC_MPEG_SEQ_HDR VIDEO_RPC_DEC_MPEG_SEQ_HDR;

struct VIDEO_MEM_CHUNK {
	long address;
	long size;
};
typedef struct VIDEO_MEM_CHUNK VIDEO_MEM_CHUNK;

struct VIDEO_RPC_VIDEO_FREE_MEMORY {
	long numMemChunks;
	struct VIDEO_MEM_CHUNK memChunk[8];
};
typedef struct VIDEO_RPC_VIDEO_FREE_MEMORY VIDEO_RPC_VIDEO_FREE_MEMORY;

struct VIDEO_RPC_CONFIG_CHUNK {
	long configMode;
	long numofChunk;
};
typedef struct VIDEO_RPC_CONFIG_CHUNK VIDEO_RPC_CONFIG_CHUNK;

struct VIDEO_RPC_DEC_CC_BYPASS_MODE {
	long instanceID;
	enum VIDEO_DECODER_CC_BYPASS_MODE cc_mode;
};
typedef struct VIDEO_RPC_DEC_CC_BYPASS_MODE VIDEO_RPC_DEC_CC_BYPASS_MODE;

struct VIDEO_RPC_DEC_SET_DNR {
	long instanceID;
	enum VIDEO_DNR_MODE dnr_mode;
};
typedef struct VIDEO_RPC_DEC_SET_DNR VIDEO_RPC_DEC_SET_DNR;

struct VIDEO_RPC_DEC_SET_REF_SYNC_LIMIT {
	long instanceID;
	long refSyncLimit;
};
typedef struct VIDEO_RPC_DEC_SET_REF_SYNC_LIMIT VIDEO_RPC_DEC_SET_REF_SYNC_LIMIT;

struct VIDEO_RPC_DEC_CAPABILITY {
	long HighWord;
	long LowWord;
};
typedef struct VIDEO_RPC_DEC_CAPABILITY VIDEO_RPC_DEC_CAPABILITY;

struct VIDEO_RPC_DEC_PARSE_FRAME_BOUNDARY {
	long instanceID;
};
typedef struct VIDEO_RPC_DEC_PARSE_FRAME_BOUNDARY VIDEO_RPC_DEC_PARSE_FRAME_BOUNDARY;

struct VIDEO_RPC_DEC_DRIP_INFO {
	long pDripData;
	long dripSize;
	long dripType;
	enum VIDEO_STREAM_TYPE codecType;
	long targetFormat;
	long targetWidth;
	long targetHeight;
	long targetBufSize;
	long pTargetAddr;
	long timeOut;
};
typedef struct VIDEO_RPC_DEC_DRIP_INFO VIDEO_RPC_DEC_DRIP_INFO;

struct VIDEO_RPC_DEC_DRIP_RESULT {
	HRESULT hr;
	int length;
};
typedef struct VIDEO_RPC_DEC_DRIP_RESULT VIDEO_RPC_DEC_DRIP_RESULT;

struct VIDEO_RPC_DEC_SET_DECODEMODE {
	long instanceID;
	int mode;
};
typedef struct VIDEO_RPC_DEC_SET_DECODEMODE VIDEO_RPC_DEC_SET_DECODEMODE;

struct VIDEO_RPC_DEC_MEASURE_DECODE_TIME {
	long instanceID;
	u_char enable;
};
typedef struct VIDEO_RPC_DEC_MEASURE_DECODE_TIME VIDEO_RPC_DEC_MEASURE_DECODE_TIME;

struct VIDEO_RPC_DEC_CMPRS_CTRL {
	long instanceID;
	u_char mode;
	enum CMPRS_RATIO ratio;
	u_char enable;
};
typedef struct VIDEO_RPC_DEC_CMPRS_CTRL VIDEO_RPC_DEC_CMPRS_CTRL;

struct VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT {
	long instanceID;
	u_int ThumbAckAddr;
	VIDEO_COLOR_FMT colorFormat;
	u_int pTargetLuma;
	u_int pTargetChroma;
	u_int pitch;
	u_int targetRectX;
	u_int targetRectY;
	u_int targetRectWidth;
	u_int targetRectHeight;
	u_int alpha;
	u_int fillColor;
};
typedef struct VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT;

struct VIDEO_RPC_THUMBNAIL_SET_THRESHOLD {
	long instanceID;
	long threshold;
};
typedef struct VIDEO_RPC_THUMBNAIL_SET_THRESHOLD VIDEO_RPC_THUMBNAIL_SET_THRESHOLD;

struct VIDEO_RPC_FLASH_SET_OUTPUT {
	long instanceID;
	long address;
};
typedef struct VIDEO_RPC_FLASH_SET_OUTPUT VIDEO_RPC_FLASH_SET_OUTPUT;

struct VIDEO_RPC_THUMBNAIL_SET_STARTPIC {
	long instanceID;
	long startPicNum;
	long endPicNum;
};
typedef struct VIDEO_RPC_THUMBNAIL_SET_STARTPIC VIDEO_RPC_THUMBNAIL_SET_STARTPIC;

struct HAL_VO_P_RECT_T {
	u_int x;
	u_int y;
	u_int w;
	u_int h;
};
typedef struct HAL_VO_P_RECT_T HAL_VO_P_RECT_T;

struct HAL_VO_P_IMAGE_T {
	u_int buf;
	u_int ofs_y;
	u_int ofs_uv;
	u_int len_buf;
	u_int stride;
	HAL_VO_P_RECT_T rect;
	HAL_VO_P_PIXEL_FORMAT pixel_format;
};
typedef struct HAL_VO_P_IMAGE_T HAL_VO_P_IMAGE_T;

struct HAL_VO_P_CFG_VALUE_T {
	u_int alpha;
	HAL_VO_P_RECT_T rect;
	HAL_VO_P_PIXEL_FORMAT pixel_format;
};
typedef struct HAL_VO_P_CFG_VALUE_T HAL_VO_P_CFG_VALUE_T;

struct HAL_VO_P_CFG_T {
	enum HAL_VO_P_CFG_TYPE type;
	HAL_VO_P_CFG_VALUE_T value;
};
typedef struct HAL_VO_P_CFG_T HAL_VO_P_CFG_T;

struct HAL_VO_P_DEVICE_CAPABILITY_T {
	HAL_VO_P_SUPPORT_PANEL_TYPE_T support_panel_type;
	HAL_VO_P_SUPPORT_PIXEL_FORMAT_T support_pixel_format;
	u_char is_seperated_vo_port;
	u_char is_changeable_cs_dynamically;
	u_int vo_port_nb;
	u_int framebuffer_length;
	HAL_VO_P_RECT_T framebuffer_rect;
};
typedef struct HAL_VO_P_DEVICE_CAPABILITY_T HAL_VO_P_DEVICE_CAPABILITY_T;

struct HAL_VO_P_FB_FRAMEBUFFER_T {
	u_char buf;
	u_int buf_length;
	u_int stride;
	HAL_VO_P_RECT_T resolution;
	HAL_VO_P_PIXEL_FORMAT pixel_format;
};
typedef struct HAL_VO_P_FB_FRAMEBUFFER_T HAL_VO_P_FB_FRAMEBUFFER_T;

struct HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_T {
	HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_FLAGS_T flags;
	HAL_VO_P_PIXEL_FORMAT pixel_format;
	u_int alpha;
	HAL_VO_P_RECT_T input;
	HAL_VO_P_RECT_T output;
};
typedef struct HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_T HAL_VO_P_FB_FRAMEBUFFER_PROPERTY_T;

struct VIDEO_RPC_CAP_START_CAPTURE {
	long instanceID;
	long startMode;
	long cap_width;
	long cap_height;
};
typedef struct VIDEO_RPC_CAP_START_CAPTURE VIDEO_RPC_CAP_START_CAPTURE;

struct VIDEO_RPC_CAP_STOP_CAPTURE {
	long instanceID;
};
typedef struct VIDEO_RPC_CAP_STOP_CAPTURE VIDEO_RPC_CAP_STOP_CAPTURE;

struct VIDEO_RPC_CAP_CAPTURE_ONE_FRAME {
	long instanceID;
	long frame_type;
	long frame_width;
	long frame_height;
	long frame_x_offset;
	long frame_y_offset;
	long frame_crop_width;
	long frame_crop_height;
};
typedef struct VIDEO_RPC_CAP_CAPTURE_ONE_FRAME VIDEO_RPC_CAP_CAPTURE_ONE_FRAME;

struct VIDEO_RPC_CAP_SET_FRAME_RATE {
	long instanceID;
	long frame_rate;
};
typedef struct VIDEO_RPC_CAP_SET_FRAME_RATE VIDEO_RPC_CAP_SET_FRAME_RATE;

struct VIDEO_RPC_ENC_INIT {
	long instanceID;
	long type;
	enum VIDEO_FORMAT videoFormat;
	enum VIDEO_SOURCE videoSource;
	enum YUV_FMT yuvFormat;
	u_char mixerWinID;
};
typedef struct VIDEO_RPC_ENC_INIT VIDEO_RPC_ENC_INIT;

struct VIDEO_RPC_ENC_VIDEOSOURCE {
	long instanceID;
	enum VIDEO_SOURCE videoSource;
};
typedef struct VIDEO_RPC_ENC_VIDEOSOURCE VIDEO_RPC_ENC_VIDEOSOURCE;

struct VIDEO_RPC_ENC_SOURCEFILE {
	long instanceID;
	char fileName[20];
	long length;
};
typedef struct VIDEO_RPC_ENC_SOURCEFILE VIDEO_RPC_ENC_SOURCEFILE;

struct VIDEO_RPC_ENC_SET_RESOLUTION {
	long instanceID;
	long hres;
	int SIF;
};
typedef struct VIDEO_RPC_ENC_SET_RESOLUTION VIDEO_RPC_ENC_SET_RESOLUTION;

struct VIDEO_RPC_ENC_SET_BITRATE {
	long instanceID;
	enum VIDEO_RATE_CONTROL_MODE rateControlMode;
	long peakBitRate;
	long aveBitRate;
	long bitBufferSize;
	long initBufferFullness;
	long time;
};
typedef struct VIDEO_RPC_ENC_SET_BITRATE VIDEO_RPC_ENC_SET_BITRATE;

struct VIDEO_RPC_ENC_SET_GOPSTRUCTURE {
	long instanceID;
	long M;
	long N;
};
typedef struct VIDEO_RPC_ENC_SET_GOPSTRUCTURE VIDEO_RPC_ENC_SET_GOPSTRUCTURE;

struct VIDEO_RPC_ENC_SET_NEWGOPONSC {
	long instanceID;
	long newGOPOnSceneChange;
};
typedef struct VIDEO_RPC_ENC_SET_NEWGOPONSC VIDEO_RPC_ENC_SET_NEWGOPONSC;

struct VIDEO_RPC_ENC_SET_INV32DETECT {
	long instanceID;
	long inverseTelecineDetection;
};
typedef struct VIDEO_RPC_ENC_SET_INV32DETECT VIDEO_RPC_ENC_SET_INV32DETECT;

struct VIDEO_RPC_ENC_SET_TF {
	long instanceID;
	long mode;
	long strength;
};
typedef struct VIDEO_RPC_ENC_SET_TF VIDEO_RPC_ENC_SET_TF;

struct VIDEO_RPC_ENC_SET_NR {
	long instanceID;
	long Hstrength;
	long Vstrength;
};
typedef struct VIDEO_RPC_ENC_SET_NR VIDEO_RPC_ENC_SET_NR;

struct VIDEO_RPC_ENC_SET_ENCFORMAT {
	long instanceID;
	enum VIDEO_STREAM_TYPE streamType;
};
typedef struct VIDEO_RPC_ENC_SET_ENCFORMAT VIDEO_RPC_ENC_SET_ENCFORMAT;

struct VIDEO_RPC_ENC_SET_RAWIN_FORMAT {
	long instanceID;
	enum YUV_FMT yuvFormat;
};
typedef struct VIDEO_RPC_ENC_SET_RAWIN_FORMAT VIDEO_RPC_ENC_SET_RAWIN_FORMAT;

struct VIDEO_RPC_ENC_CONFIG_CCDATA {
	long instanceID;
	long option;
	long CCDataSize;
	u_char CCDAta[128];
};
typedef struct VIDEO_RPC_ENC_CONFIG_CCDATA VIDEO_RPC_ENC_CONFIG_CCDATA;

struct VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ {
	long instanceID;
	long closedGOPFreq;
};
typedef struct VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ;

struct VIDEO_RPC_ENC_START_ENC {
	long instanceID;
	long startMode;
};
typedef struct VIDEO_RPC_ENC_START_ENC VIDEO_RPC_ENC_START_ENC;

struct VIDEO_RPC_ENC_PAUSE_ENC {
	long instanceID;
	long pausedAtVOBU;
};
typedef struct VIDEO_RPC_ENC_PAUSE_ENC VIDEO_RPC_ENC_PAUSE_ENC;

struct VIDEO_RPC_ENC_STOP_ENC {
	long instanceID;
};
typedef struct VIDEO_RPC_ENC_STOP_ENC VIDEO_RPC_ENC_STOP_ENC;

struct VIDEO_RPC_ENC_CONFIG_VOBU {
	long instanceID;
	long minGOPs;
};
typedef struct VIDEO_RPC_ENC_CONFIG_VOBU VIDEO_RPC_ENC_CONFIG_VOBU;

struct VIDEO_RPC_ENC_MPEG_I_ENC {
	long pIFrameStream;
	long pTargetLuma;
	long pTargetChroma;
	long width;
	long height;
	long maxSize;
};
typedef struct VIDEO_RPC_ENC_MPEG_I_ENC VIDEO_RPC_ENC_MPEG_I_ENC;

struct VIDEO_RPC_ENC_SET_VBID_WSS_FREQ {
	long instanceID;
	long numOfField;
};
typedef struct VIDEO_RPC_ENC_SET_VBID_WSS_FREQ VIDEO_RPC_ENC_SET_VBID_WSS_FREQ;

struct VIDEO_RPC_ENC_SET_VBV {
	long instanceID;
	long vbv_buf_size;
	long vbv_buf_fullness;
};
typedef struct VIDEO_RPC_ENC_SET_VBV VIDEO_RPC_ENC_SET_VBV;

struct VIDEO_RPC_ENC_SET_NONREALTIME {
	long instanceID;
	u_char bNonRealTime;
};
typedef struct VIDEO_RPC_ENC_SET_NONREALTIME VIDEO_RPC_ENC_SET_NONREALTIME;

struct VIDEO_RPC_ENC_SET_NEW_RESOLUTION {
	long instanceID;
	long in_width;
	long in_height;
	long out_width;
	long out_height;
};
typedef struct VIDEO_RPC_ENC_SET_NEW_RESOLUTION VIDEO_RPC_ENC_SET_NEW_RESOLUTION;

struct VIDEO_RPC_ENC_SET_FRAME_RATE {
	long instanceID;
	long frame_rate;
};
typedef struct VIDEO_RPC_ENC_SET_FRAME_RATE VIDEO_RPC_ENC_SET_FRAME_RATE;

struct VIDEO_RPC_ENC_SEND_TVD_INFO {
	long instanceID;
	enum VIDEO_FORMAT videoFormat;
	long Macrovision;
	long reserved0;
	long reserved1;
};
typedef struct VIDEO_RPC_ENC_SEND_TVD_INFO VIDEO_RPC_ENC_SEND_TVD_INFO;

struct VIDEO_RPC_ENC_REQ_KEY_FRAME {
	long instanceID;
};
typedef struct VIDEO_RPC_ENC_REQ_KEY_FRAME VIDEO_RPC_ENC_REQ_KEY_FRAME;

struct VIDEO_RPC_ENC_SET_PROFILE {
	long instanceID;
	enum VIDEO_ENC_PROFILE profile;
};
typedef struct VIDEO_RPC_ENC_SET_PROFILE VIDEO_RPC_ENC_SET_PROFILE;

struct VIDEO_RPC_VOUT_SET_VIDEO_STANDARD {
	enum VO_STANDARD standard;
	u_char enProg;
	u_char enDIF;
	u_char enCompRGB;
	enum VO_PEDESTAL_TYPE pedType;
};
typedef struct VIDEO_RPC_VOUT_SET_VIDEO_STANDARD VIDEO_RPC_VOUT_SET_VIDEO_STANDARD;

struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD {
	enum VO_STANDARD standard;
	u_char enProg;
	u_char enDIF;
	u_char enCompRGB;
	enum VO_PEDESTAL_TYPE pedType;
	u_int dataInt0;
	u_int dataInt1;
	u_char hdmiState;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD;

struct VIDEO_RPC_VOUT_SET_HDMI {
	enum VO_HDMI_MODE hdmiMode;
	enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
	u_char audioChannelCount;
};
typedef struct VIDEO_RPC_VOUT_SET_HDMI VIDEO_RPC_VOUT_SET_HDMI;

struct VIDEO_RPC_VOUT_CONFIG_HDMI {
	enum VO_HDMI_MODE hdmiMode;
	enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
	enum VO_HDMI_COLOR_FMT colorFmt;
	u_char audioChannelCount;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_HDMI VIDEO_RPC_VOUT_CONFIG_HDMI;

struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME {
	enum VO_HDMI_MODE hdmiMode;
	enum VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
	u_char audioChannelCount;
	u_char dataByte1;
	u_char dataByte2;
	u_char dataByte3;
	u_char dataByte4;
	u_char dataByte5;
	u_int dataInt0;
	long reserved1;
	long reserved2;
	long reserved3;
	long reserved4;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME;

struct VIDEO_RPC_VOUT_SET_BKGRND {
	struct VO_COLOR bgColor;
	u_char bgEnable;
};
typedef struct VIDEO_RPC_VOUT_SET_BKGRND VIDEO_RPC_VOUT_SET_BKGRND;

struct VIDEO_RPC_VOUT_SET_MIXER_ORDER {
	u_char pic;
	u_char dd;
	u_char v1;
	u_char sub1;
	u_char v2;
	u_char osd1;
	u_char osd2;
	u_char csr;
	u_char reserved1;
	u_char reserved2;
	u_char reserved3;
	u_char reserved4;
	u_char reserved5;
};
typedef struct VIDEO_RPC_VOUT_SET_MIXER_ORDER VIDEO_RPC_VOUT_SET_MIXER_ORDER;

struct VIDEO_RPC_VOUT_SET_CC {
	u_char enCC_odd;
	u_char enCC_even;
};
typedef struct VIDEO_RPC_VOUT_SET_CC VIDEO_RPC_VOUT_SET_CC;

struct VIDEO_RPC_VOUT_SET_APS {
	u_char enExt;
	enum VO_VBI_APS APS;
};
typedef struct VIDEO_RPC_VOUT_SET_APS VIDEO_RPC_VOUT_SET_APS;

struct VIDEO_RPC_VOUT_SET_COPY_MODE {
	u_char enExt;
	enum VO_VBI_COPY_MODE copyMode;
};
typedef struct VIDEO_RPC_VOUT_SET_COPY_MODE VIDEO_RPC_VOUT_SET_COPY_MODE;

struct VIDEO_RPC_VOUT_SET_AR {
	u_char enExt;
	enum VO_VBI_ASPECT_RATIO aspectRatio;
};
typedef struct VIDEO_RPC_VOUT_SET_AR VIDEO_RPC_VOUT_SET_AR;

struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE videoWin;
	struct VO_RECTANGLE borderWin;
	struct VO_COLOR borderColor;
	u_char enBorder;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_DISP_WIN VIDEO_RPC_VOUT_CONFIG_DISP_WIN;

struct VIDEO_RPC_VOUT_SET_RESCALE_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_RESCALE_MODE rescaleMode;
	struct VO_RECTANGLE rescaleWindow;
	u_char delayExec;
};
typedef struct VIDEO_RPC_VOUT_SET_RESCALE_MODE VIDEO_RPC_VOUT_SET_RESCALE_MODE;

struct VIDEO_RPC_VOUT_SET_DEINT_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_DEINT_MODE deintMode;
};
typedef struct VIDEO_RPC_VOUT_SET_DEINT_MODE VIDEO_RPC_VOUT_SET_DEINT_MODE;

struct VIDEO_RPC_VOUT_ZOOM {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE zoomWin;
};
typedef struct VIDEO_RPC_VOUT_ZOOM VIDEO_RPC_VOUT_ZOOM;

struct VIDEO_RPC_VOUT_PAN_ZOOM {
	enum VO_VIDEO_PLANE videoPlane;
	struct VO_RECTANGLE zoomWinStart;
	struct VO_RECTANGLE zoomWinEnd;
	u_short time;
};
typedef struct VIDEO_RPC_VOUT_PAN_ZOOM VIDEO_RPC_VOUT_PAN_ZOOM;

struct VIDEO_RPC_VOUT_TRANSPARENCY {
	enum VO_VIDEO_PLANE videoPlane;
	u_short alphaStart;
	u_short alphaEnd;
	u_short time;
};
typedef struct VIDEO_RPC_VOUT_TRANSPARENCY VIDEO_RPC_VOUT_TRANSPARENCY;

struct VIDEO_RPC_VOUT_CONFIG_OSD {
	enum VO_OSD_LPF_TYPE lpfType;
	short RGB2YUVcoeff[12];
};
typedef struct VIDEO_RPC_VOUT_CONFIG_OSD VIDEO_RPC_VOUT_CONFIG_OSD;

struct VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE {
	u_char paletteIndex;
	long pPalette;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE;

struct VIDEO_RPC_VOUT_CREATE_OSD_WIN {
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	int colorKey;
	u_char alpha;
};
typedef struct VIDEO_RPC_VOUT_CREATE_OSD_WIN VIDEO_RPC_VOUT_CREATE_OSD_WIN;

struct VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE {
	u_char winID;
	u_char paletteIndex;
};
typedef struct VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE;

struct VIDEO_RPC_VOUT_MODIFY_OSD_WIN {
	u_char winID;
	u_char reqMask;
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	int colorKey;
	u_char alpha;
	u_short startX;
	u_short startY;
	u_short imgPitch;
	long pImage;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_MODIFY_OSD_WIN VIDEO_RPC_VOUT_MODIFY_OSD_WIN;

struct VIDEO_RPC_VOUT_DRAW_OSD_WIN {
	u_short winID;
	u_short startX;
	u_short startY;
	u_short imgPitch;
	long pImage;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DRAW_OSD_WIN VIDEO_RPC_VOUT_DRAW_OSD_WIN;

struct VIDEO_RPC_VOUT_HIDE_OSD_WIN {
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_HIDE_OSD_WIN VIDEO_RPC_VOUT_HIDE_OSD_WIN;

struct VIDEO_RPC_VOUT_DELETE_OSD_WIN {
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DELETE_OSD_WIN VIDEO_RPC_VOUT_DELETE_OSD_WIN;

struct VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS {
	struct VO_RECTANGLE srcWin;
	struct VO_RECTANGLE dispWin;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS;

struct VIDEO_RPC_VOUT_CONFIG_CURSOR {
	char alpha;
	char colorKey;
	struct VO_COLOR colorMap[4];
	enum VO_OSD_LPF_TYPE lpfType;
	long pCursorImg;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_CURSOR VIDEO_RPC_VOUT_CONFIG_CURSOR;

struct VIDEO_RPC_VOUT_CONFIG_MARS_CURSOR {
	u_short width;
	u_short height;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	u_char paletteIndex;
	long pCursorImg;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_MARS_CURSOR VIDEO_RPC_VOUT_CONFIG_MARS_CURSOR;

struct VIDEO_RPC_VOUT_DRAW_CURSOR {
	u_short x;
	u_short y;
};
typedef struct VIDEO_RPC_VOUT_DRAW_CURSOR VIDEO_RPC_VOUT_DRAW_CURSOR;

struct VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX {
	short ColorMatrixCoeff[12];
};
typedef struct VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX;

struct VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS {
	enum VO_GRAPHIC_PLANE plane;
	struct VO_RECTANGLE srcWin;
	struct VO_RECTANGLE dispWin;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS;

struct VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_OSD_RGB_ORDER rgbOrder;
	int colorKey;
	u_char compressed;
	u_char alpha;
	u_char reserved;
};
typedef struct VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_char winID;
	u_char reqMask;
	struct VO_RECTANGLE winPos;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_OSD_RGB_ORDER rgbOrder;
	int colorKey;
	u_char alpha;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	u_char paletteIndex;
	u_char compressed;
	u_char interlace_Frame;
	u_char bottomField;
	u_short startX[4];
	u_short startY[4];
	u_short imgPitch[4];
	long pImage[4];
	u_char reserved;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_short winID;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	u_char paletteIndex;
	u_char compressed;
	u_char interlace_Frame;
	u_char bottomField;
	u_short startX[4];
	u_short startY[4];
	u_short imgPitch[4];
	long pImage[4];
	u_char reserved;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN {
	enum VO_GRAPHIC_PLANE plane;
	u_short winID;
	u_char go;
};
typedef struct VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN {
	long x;
	long y;
	long width;
	long height;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_OSD_RGB_ORDER rgbOrder;
	long colorKey;
	long alpha;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	long paletteIndex;
	long compressed;
	long interlace_Frame;
	long bottomField;
	long startX[4];
	long startY[4];
	long imgPitch[4];
	long pImage[4];
	long reserved0;
	long reserved1;
};
typedef struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN;

struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC {
	enum VO_GRAPHIC_PLANE plane;
	u_char osdNum;
	long pGraphic;
};
typedef struct VIDEO_RPC_VOUT_DISPLAY_GRAPHIC VIDEO_RPC_VOUT_DISPLAY_GRAPHIC;

struct VIDEO_RPC_VOUT_HACK_GRAPHICCANVAS {
	enum VO_GRAPHIC_PLANE plane;
	enum VO_HACK_CANVAS_MODE mode;
};
typedef struct VIDEO_RPC_VOUT_HACK_GRAPHICCANVAS VIDEO_RPC_VOUT_HACK_GRAPHICCANVAS;

struct VIDEO_RPC_VOUT_VIDEO_CAPTURE {
	enum VO_OSD_COLOR_FORMAT colorFmt;
	long pImage;
	u_short imgPitch;
	u_short startX;
	u_short startY;
	u_short width;
	u_short height;
};
typedef struct VIDEO_RPC_VOUT_VIDEO_CAPTURE VIDEO_RPC_VOUT_VIDEO_CAPTURE;

struct VIDEO_RPC_VO_FILTER_DISPLAY {
	long instanceID;
	enum VO_VIDEO_PLANE videoPlane;
	u_char zeroBuffer;
	u_char realTimeSrc;
};
typedef struct VIDEO_RPC_VO_FILTER_DISPLAY VIDEO_RPC_VO_FILTER_DISPLAY;

struct VIDEO_RPC_VO_FILTER_HIDE {
	long instanceID;
	enum VO_VIDEO_PLANE videoPlane;
};
typedef struct VIDEO_RPC_VO_FILTER_HIDE VIDEO_RPC_VO_FILTER_HIDE;

struct VIDEO_RPC_VO_FILTER_DISP_BD_COLOR {
	long instanceID;
	enum VO_VIDEO_PLANE videoPlane;
};
typedef struct VIDEO_RPC_VO_FILTER_DISP_BD_COLOR VIDEO_RPC_VO_FILTER_DISP_BD_COLOR;

struct VIDEO_RPC_VO_FILTER_SET_SPEED {
	long instanceID;
	long speed;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_SPEED VIDEO_RPC_VO_FILTER_SET_SPEED;

struct VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC {
	long instanceID;
	long lumaAddr;
	long lumaPitch;
	long chromaAddr;
	long chromaPitch;
	long width;
	long height;
};
typedef struct VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC;

struct VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER {
	long instanceID;
	long border;
	long num_pixels;
	struct VO_COLOR fillColor;
};
typedef struct VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER;

struct VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY {
	long instanceID;
	u_char enFastDisplay;
	u_char count;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY;

struct VIDEO_RPC_VO_FILTER_CAPTURE {
	long instanceID;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	long pImage;
	u_short imgPitch;
	u_short startX;
	u_short startY;
	u_short width;
	u_short height;
	long pStretchBuf;
	long stretchBufSize;
	long pImage_C;
	u_short imgPitch_C;
};
typedef struct VIDEO_RPC_VO_FILTER_CAPTURE VIDEO_RPC_VO_FILTER_CAPTURE;

struct VIDEO_RPC_VO_FILTER_ENABLE_3D_MODE_DETECT {
	long instanceID;
	u_char enable;
	enum YUV_FMT yuvFormat;
	u_short fullWidth;
	u_short fullHeight;
};
typedef struct VIDEO_RPC_VO_FILTER_ENABLE_3D_MODE_DETECT VIDEO_RPC_VO_FILTER_ENABLE_3D_MODE_DETECT;

struct VIDEO_RPC_VO_FILTER_CLEAR_VIDEO {
	long instanceID;
	struct VO_COLOR fillColor;
};
typedef struct VIDEO_RPC_VO_FILTER_CLEAR_VIDEO VIDEO_RPC_VO_FILTER_CLEAR_VIDEO;

struct VIDEO_RPC_VO_FILTER_Config_SyncAV {
	long instanceID;
	u_char enable;
};
typedef struct VIDEO_RPC_VO_FILTER_Config_SyncAV VIDEO_RPC_VO_FILTER_Config_SyncAV;

struct VIDEO_RPC_VO_FILTER_Config_VoFreeze {
	long instanceID;
	u_char enable;
};
typedef struct VIDEO_RPC_VO_FILTER_Config_VoFreeze VIDEO_RPC_VO_FILTER_Config_VoFreeze;

struct VIDEO_RPC_VO_FILTER_Config_DisplayDelay {
	long instanceID;
	long delay;
};
typedef struct VIDEO_RPC_VO_FILTER_Config_DisplayDelay VIDEO_RPC_VO_FILTER_Config_DisplayDelay;

struct VIDEO_RPC_VO_FILTER_ConnectVDec {
	long instanceID;
	u_char nPort;
};
typedef struct VIDEO_RPC_VO_FILTER_ConnectVDec VIDEO_RPC_VO_FILTER_ConnectVDec;

struct VIDEO_RPC_VO_FILTER_Config_Mastership {
	long instanceID;
	u_char useSTC;
	u_char lipsyncMaster;
	u_char audioChannel;
};
typedef struct VIDEO_RPC_VO_FILTER_Config_Mastership VIDEO_RPC_VO_FILTER_Config_Mastership;

struct VIDEO_RPC_VO_FILTER_SET_STC_MODE {
	long instanceID;
	u_char useSTC;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_STC_MODE VIDEO_RPC_VO_FILTER_SET_STC_MODE;

struct VIDEO_RPC_VO_FILTER_SET_LIPSYNC_MASTER {
	long instanceID;
	u_char lipsyncMaster;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_LIPSYNC_MASTER VIDEO_RPC_VO_FILTER_SET_LIPSYNC_MASTER;

struct VIDEO_RPC_VO_FILTER_SET_AUDIO_CHANNEL {
	long instanceID;
	u_char audioChannel;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_AUDIO_CHANNEL VIDEO_RPC_VO_FILTER_SET_AUDIO_CHANNEL;

struct VIDEO_RPC_VO_FILTER_CONFIG_PVR_MODE {
	long instanceID;
	u_char mode;
};
typedef struct VIDEO_RPC_VO_FILTER_CONFIG_PVR_MODE VIDEO_RPC_VO_FILTER_CONFIG_PVR_MODE;

struct VIDEO_RPC_VO_FILTER_CONFIG_FAST_IFRAME_MODE {
	long instanceID;
	u_char mode;
};
typedef struct VIDEO_RPC_VO_FILTER_CONFIG_FAST_IFRAME_MODE VIDEO_RPC_VO_FILTER_CONFIG_FAST_IFRAME_MODE;

struct VIDEO_RPC_VO_FILTER_Config_Dual3D {
	long instanceID;
	u_char enable;
};
typedef struct VIDEO_RPC_VO_FILTER_Config_Dual3D VIDEO_RPC_VO_FILTER_Config_Dual3D;

struct VIDEO_RPC_VO_FILTER_SET_APP_TYPE {
	long instanceID;
	enum VO_APP_TYPE appType;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_APP_TYPE VIDEO_RPC_VO_FILTER_SET_APP_TYPE;

struct VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC {
	long instanceID;
	u_char alwaysOnTop;
};
typedef struct VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC;

struct VIDEO_RPC_SUBPIC_DEC_CONFIGURE {
	long instanceID;
	u_short fullWidth;
	u_short fullHeight;
	enum SP_STREAM_TYPE streamType;
};
typedef struct VIDEO_RPC_SUBPIC_DEC_CONFIGURE VIDEO_RPC_SUBPIC_DEC_CONFIGURE;

struct VIDEO_RPC_SUBPIC_DEC_PAGE {
	long instanceID;
	u_short page_id_composition;
	u_short page_id_ancillary;
};
typedef struct VIDEO_RPC_SUBPIC_DEC_PAGE VIDEO_RPC_SUBPIC_DEC_PAGE;

struct VIDEO_RPC_DIRECT_VO_OPEN {
	long instanceID;
	u_int version_num;
};
typedef struct VIDEO_RPC_DIRECT_VO_OPEN VIDEO_RPC_DIRECT_VO_OPEN;

struct VIDEO_RPC_DIRECT_VO_RUN {
	long instanceID;
	long shmPhyAddr;
	long versionNum;
	long video_port;
	long dolbyVision;
	long dolbyVisionProfile;
};
typedef struct VIDEO_RPC_DIRECT_VO_RUN VIDEO_RPC_DIRECT_VO_RUN;

struct VIDEO_RPC_DIRECT_VO_STOP {
	long instanceID;
	long shmPhyAddr;
};
typedef struct VIDEO_RPC_DIRECT_VO_STOP VIDEO_RPC_DIRECT_VO_STOP;

struct VIDEO_RPC_DIRECT_VO_FLUSH {
	long instanceID;
	long video_port;
};
typedef struct VIDEO_RPC_DIRECT_VO_FLUSH VIDEO_RPC_DIRECT_VO_FLUSH;

struct DOLBY_VISION_CAPTURE_BUFFER_T {
	u_long uncacheAddr;
	u_long cacheAddr;
	u_long phyaddr;
	u_int size;
};
typedef struct DOLBY_VISION_CAPTURE_BUFFER_T DOLBY_VISION_CAPTURE_BUFFER_T;

struct DOLBY_VISION_CAPTURE_INFO {
	DOLBY_VISION_CAPTURE_BUFFER_T bufAddr_md[2];
	DOLBY_VISION_CAPTURE_BUFFER_T bufAddr_video[2];
	DOLBY_VISION_CAPTURE_BUFFER_T bufAddr_graph[2];
};
typedef struct DOLBY_VISION_CAPTURE_INFO DOLBY_VISION_CAPTURE_INFO;

struct VIDEO_RPC_DOLBY_VISION_HDMI_SET_DETECT_ENABLE {
	long instanceID;
	long detect_en;
	long display_en;
	DOLBY_VISION_CAPTURE_INFO capInfo;
};
typedef struct VIDEO_RPC_DOLBY_VISION_HDMI_SET_DETECT_ENABLE VIDEO_RPC_DOLBY_VISION_HDMI_SET_DETECT_ENABLE;

struct VIDEO_RPC_DOLBY_VISION_HDMI_GET_DETECT_INFO {
	long instanceID;
	long detect_ret;
};
typedef struct VIDEO_RPC_DOLBY_VISION_HDMI_GET_DETECT_INFO VIDEO_RPC_DOLBY_VISION_HDMI_GET_DETECT_INFO;

struct VIDEO_RPC_DOLBY_VISION_HDMI_SET_DISPLAY_ENABLE {
	long instanceID;
	long display_en;
};
typedef struct VIDEO_RPC_DOLBY_VISION_HDMI_SET_DISPLAY_ENABLE VIDEO_RPC_DOLBY_VISION_HDMI_SET_DISPLAY_ENABLE;

struct VIDEO_RPC_TVD_CONFIG {
	enum ENUM_TVD_VIDEO_FORMAT video_fmt;
	enum ENUM_TVD_INPUT_FORMAT input_fmt;
	enum ENUM_TVD_YC_SEP_MODE ycsep_mode;
	u_char default_ycsep;
	u_char mv_workaround_en;
};
typedef struct VIDEO_RPC_TVD_CONFIG VIDEO_RPC_TVD_CONFIG;

struct VIDEO_RPC_TVD_VIDEO_FORMAT {
	enum ENUM_TVD_VIDEO_FORMAT format;
};
typedef struct VIDEO_RPC_TVD_VIDEO_FORMAT VIDEO_RPC_TVD_VIDEO_FORMAT;

struct VIDEO_RPC_TVD_INPUT_FORMAT {
	enum ENUM_TVD_INPUT_FORMAT format;
};
typedef struct VIDEO_RPC_TVD_INPUT_FORMAT VIDEO_RPC_TVD_INPUT_FORMAT;

struct VIDEO_RPC_TVD_YC_SEP_MODE {
	enum ENUM_TVD_YC_SEP_MODE mode;
};
typedef struct VIDEO_RPC_TVD_YC_SEP_MODE VIDEO_RPC_TVD_YC_SEP_MODE;

struct VIDEO_RPC_TVD_VBI_CTRL {
	u_char VBI_slicer_en;
};
typedef struct VIDEO_RPC_TVD_VBI_CTRL VIDEO_RPC_TVD_VBI_CTRL;

struct VIDEO_RPC_TVD_ADJ_CONTRAST {
	u_char value;
};
typedef struct VIDEO_RPC_TVD_ADJ_CONTRAST VIDEO_RPC_TVD_ADJ_CONTRAST;

struct VIDEO_RPC_TVD_ADJ_BRIGHTNESS {
	u_char value;
};
typedef struct VIDEO_RPC_TVD_ADJ_BRIGHTNESS VIDEO_RPC_TVD_ADJ_BRIGHTNESS;

struct VIDEO_RPC_TVD_ADJ_SATURATION {
	u_char value;
};
typedef struct VIDEO_RPC_TVD_ADJ_SATURATION VIDEO_RPC_TVD_ADJ_SATURATION;

struct VIDEO_RPC_TVD_ADJ_HUE {
	u_char value;
};
typedef struct VIDEO_RPC_TVD_ADJ_HUE VIDEO_RPC_TVD_ADJ_HUE;

struct VIDEO_RPC_TVD_BLUE_MODE {
	u_char mode;
};
typedef struct VIDEO_RPC_TVD_BLUE_MODE VIDEO_RPC_TVD_BLUE_MODE;

struct VIDEO_RPC_VIN_ADJ_SCALE_COEF {
	u_short y_32th_coef;
	u_short c_16th_coef;
};
typedef struct VIDEO_RPC_VIN_ADJ_SCALE_COEF VIDEO_RPC_VIN_ADJ_SCALE_COEF;

struct CHANNEL_RES {
	HRESULT hr;
	enum ENUM_TVD_VIDEO_FORMAT fmt;
};
typedef struct CHANNEL_RES CHANNEL_RES;

struct VIDEO_RPC_JPEG_DEC {
	long colorFormat;
	long pBitstreamRB;
	long pTargetLuma;
	long pTargetChroma;
	long pitch;
	long targetRectX;
	long targetRectY;
	long targetRectWidth;
	long targetRectHeight;
	long centerToTargetRect;
	enum VIDEO_JPEG_ROTATION rotation;
	long srcRectAlignmentRatioX;
	long srcRectAlignmentRatioY;
	long srcRectZoomFactor;
	long initOption;
	long pSharedJpegDecCtrl;
	long useWholePictureOnly;
	long ScaleUpToRect;
	long FillBlackInRect;
	long SmoothLevel;
	enum VIDEO_JPEG_MIRROR mirror;
	long pTargetLuma_right;
	long pTargetChroma_right;
	long pLumaSeq;
	long pChromaSeq;
	u_short pitchYSeq;
	u_short pitchCSeq;
	u_short widthSeq;
	u_short heightSeq;
	long cropRectX;
	long cropRectY;
	long cropRectWidth;
	long cropRectHeight;
	long cropBuffer;
	long reserved;
};
typedef struct VIDEO_RPC_JPEG_DEC VIDEO_RPC_JPEG_DEC;

struct VIDEO_RPC_JPEG_DEC_BATCH {
	long number;
	long structure_addr;
};
typedef struct VIDEO_RPC_JPEG_DEC_BATCH VIDEO_RPC_JPEG_DEC_BATCH;

struct VIDEO_RPC_TRANSITION_EFFECT {
	long instantID;
	long YBufID_A;
	long YBufID_B;
	long CBufID_A;
	long CBufID_B;
	long width;
	long height;
	long type;
	long frame_num;
	long PTS_inc;
	long start_x;
	long start_y;
	long start_width;
	long start_height;
	long end_x;
	long end_y;
	long end_width;
	long end_height;
	long pSharedTransEffCtrl;
	long YBufID_A_right;
	long YBufID_B_right;
	long CBufID_A_right;
	long CBufID_B_right;
};
typedef struct VIDEO_RPC_TRANSITION_EFFECT VIDEO_RPC_TRANSITION_EFFECT;

struct VIDEO_RPC_MIXER_FILTER_CONFIGURE {
	long instanceID;
	u_short width;
	u_short height;
	u_char EnablebgPicture;
	struct VO_COLOR bgColor;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	enum VO_GRAPHIC_STORAGE_MODE storageMode;
	struct VO_RECTANGLE SrcWin;
	struct VO_RECTANGLE dispWin;
	u_short startX[2];
	u_short startY[2];
	u_short imgPitch[2];
	long pImage[2];
};
typedef struct VIDEO_RPC_MIXER_FILTER_CONFIGURE VIDEO_RPC_MIXER_FILTER_CONFIGURE;

struct VIDEO_RPC_MIXER_FILTER_CONFIGURE_WIN {
	long instanceID;
	long count;
	struct MIXER_WIN win[8];
};
typedef struct VIDEO_RPC_MIXER_FILTER_CONFIGURE_WIN VIDEO_RPC_MIXER_FILTER_CONFIGURE_WIN;

struct VIDEO_RPC_MIXER_FILTER_SET_MASTER_WIN {
	long instanceID;
	u_char winID;
};
typedef struct VIDEO_RPC_MIXER_FILTER_SET_MASTER_WIN VIDEO_RPC_MIXER_FILTER_SET_MASTER_WIN;

struct VIDEO_RPC_MIXER_PLAY_ONE_MOTION_JPEG_FRAME {
	u_char mixerWinID;
	enum VIDEO_STREAM_TYPE stream_type;
	enum YUV_FMT yuv_fmt;
	long base;
	long size;
	long width;
	long height;
};
typedef struct VIDEO_RPC_MIXER_PLAY_ONE_MOTION_JPEG_FRAME VIDEO_RPC_MIXER_PLAY_ONE_MOTION_JPEG_FRAME;

struct VIDEO_RPC_MIXER_FILTER_CAPTURE {
	long instanceID;
	enum VO_OSD_COLOR_FORMAT colorFmt;
	long pImage[2];
	u_short imgPitch[2];
	u_short startX[2];
	u_short startY[2];
	u_short width[2];
	u_short height[2];
	long pStretchBuf[2];
	long stretchBufSize[2];
	long pImage_C[2];
	u_short imgPitch_C[2];
};
typedef struct VIDEO_RPC_MIXER_FILTER_CAPTURE VIDEO_RPC_MIXER_FILTER_CAPTURE;

struct VIDEO_RPC_YUYV_TO_RGB {
	long yuyv_addr;
	long rgb_addr;
	long width;
	long height;
	long imgPitch;
	enum YUV_FMT yuv_fmt;
	enum IMG_TARGET_FORMAT rgb_fmt;
};
typedef struct VIDEO_RPC_YUYV_TO_RGB VIDEO_RPC_YUYV_TO_RGB;

struct VIDEO_RPC_DEBUG_MEMORY {
	long videoFirmwareVersion;
};
typedef struct VIDEO_RPC_DEBUG_MEMORY VIDEO_RPC_DEBUG_MEMORY;

struct SCALER_RPC_STRUCT {
	u_int ulCmd;
	u_int ulArgAddr;
	u_int ulArgSize;
};
typedef struct SCALER_RPC_STRUCT SCALER_RPC_STRUCT;

struct SCALER_RPC_SHARE_MEM {
	u_int ulAddr[50];
};
typedef struct SCALER_RPC_SHARE_MEM SCALER_RPC_SHARE_MEM;

struct VIDEO_RPC_VBM_BORROWMEMCHUNK {
	u_int memChunkAddr;
	u_int memChunkSize;
	u_int reqSize;
	u_int type;
};
typedef struct VIDEO_RPC_VBM_BORROWMEMCHUNK VIDEO_RPC_VBM_BORROWMEMCHUNK;

struct VIDEO_RPC_VBM_RETURNMEMCHUNK {
	u_int memChunkAddr;
	u_int memChunkSize;
};
typedef struct VIDEO_RPC_VBM_RETURNMEMCHUNK VIDEO_RPC_VBM_RETURNMEMCHUNK;

struct VIDEO_RPC_VP_SEQUENTIAL2BLOCK {
	u_int DC_index;
	u_int seqBufAddr;
	u_int width;
	u_int height;
	u_int pitch;
	u_int x_offset;
	u_int y_offset;
};
typedef struct VIDEO_RPC_VP_SEQUENTIAL2BLOCK VIDEO_RPC_VP_SEQUENTIAL2BLOCK;

struct VIDEO_RPC_SE_ALPHA {
	u_int src_addrY;
	u_int src_addrC;
	u_int dst_addrY;
	u_int dst_addrC;
	u_int width;
	u_int height;
	u_int constAlpha;
};
typedef struct VIDEO_RPC_SE_ALPHA VIDEO_RPC_SE_ALPHA;

struct VIDEO_RPC_VOUT_VODMA_ENABLE {
	enum VO_VIDEO_PLANE videoPlane;
	u_char enable;
};
typedef struct VIDEO_RPC_VOUT_VODMA_ENABLE VIDEO_RPC_VOUT_VODMA_ENABLE;

struct VIDEO_RPC_VOUT_FRAMERATE_CONTROL_STRUCT {
	u_char opCode;
	u_char curDispMode;
	u_char enableForceFrameRate[2];
	u_int ForceFrameRate[2];
	u_char enableDoubleDvs[2];
	u_int DoubleDvsThreshold[2];
	u_char enableHighBound[2];
	u_int HighBound[2];
	u_int HighAdjust[2];
	u_char enableLowBound[2];
	u_int LowBound[2];
	u_int LowAdjust[2];
};
typedef struct VIDEO_RPC_VOUT_FRAMERATE_CONTROL_STRUCT VIDEO_RPC_VOUT_FRAMERATE_CONTROL_STRUCT;

struct VIDEO_RPC_VO_FILTER_SET_SOURCE_TYPE {
	long instanceID;
	enum VO_SOURCE_TYPE sourceType;
};
typedef struct VIDEO_RPC_VO_FILTER_SET_SOURCE_TYPE VIDEO_RPC_VO_FILTER_SET_SOURCE_TYPE;

struct VIDEO_RPC_VOUT_DECIMATE_STRUCT {
	enum VO_VIDEO_PLANE videoPlane;
	u_char HorDecimate;
	u_char VerDecimate;
};
typedef struct VIDEO_RPC_VOUT_DECIMATE_STRUCT VIDEO_RPC_VOUT_DECIMATE_STRUCT;

struct VIDEO_RPC_VOUT_SET_SCALER_AR_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	enum VO_SCALER_AR_MODE ScalerARMode;
};
typedef struct VIDEO_RPC_VOUT_SET_SCALER_AR_MODE VIDEO_RPC_VOUT_SET_SCALER_AR_MODE;

struct VIDEO_RPC_VOUT_CONFIG_SCALER_AR_CUSTOMER_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	u_short customerX;
	u_short customerY;
	u_short customerW;
	u_short customerH;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_SCALER_AR_CUSTOMER_MODE VIDEO_RPC_VOUT_CONFIG_SCALER_AR_CUSTOMER_MODE;

struct VIDEO_RPC_VOUT_VODMA_VFLIP_ENABLE {
	enum VO_VIDEO_PLANE videoPlane;
	u_char enable;
};
typedef struct VIDEO_RPC_VOUT_VODMA_VFLIP_ENABLE VIDEO_RPC_VOUT_VODMA_VFLIP_ENABLE;

struct VIDEO_RPC_VOUT_VODMA_ZOOM_RATE {
	enum VO_VIDEO_PLANE videoPlane;
	u_char zoomRate;
};
typedef struct VIDEO_RPC_VOUT_VODMA_ZOOM_RATE VIDEO_RPC_VOUT_VODMA_ZOOM_RATE;

struct VIDEO_RPC_VOUT_VODMA_POS_FIUNTUNE {
	enum VO_VIDEO_PLANE videoPlane;
	int shift_h;
	int shift_v;
	int shift_w;
	int shift_l;
};
typedef struct VIDEO_RPC_VOUT_VODMA_POS_FIUNTUNE VIDEO_RPC_VOUT_VODMA_POS_FIUNTUNE;

struct VIDEO_RPC_VOUT_FORCEBG_CTRL {
	u_char ForceBGType;
	u_char enable;
};
typedef struct VIDEO_RPC_VOUT_FORCEBG_CTRL VIDEO_RPC_VOUT_FORCEBG_CTRL;

struct VIDEO_RPC_VOUT_CONFIG_SCALEUP {
	long instanceID;
	u_char enable;
	u_int tgtw;
	u_int tgth;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_SCALEUP VIDEO_RPC_VOUT_CONFIG_SCALEUP;

struct VIDEO_RPC_VOUT_VODMA_CONFIG_VSGEN_IV_SRC {
	enum VO_VIDEO_PLANE videoPlane;
	enum VSGEN_IV_SRC ivSrc;
};
typedef struct VIDEO_RPC_VOUT_VODMA_CONFIG_VSGEN_IV_SRC VIDEO_RPC_VOUT_VODMA_CONFIG_VSGEN_IV_SRC;

struct VIDEO_RPC_VOUT_VSCINPUTTYPE {
	u_char vsc_source;
	u_char vsc_port;
};
typedef struct VIDEO_RPC_VOUT_VSCINPUTTYPE VIDEO_RPC_VOUT_VSCINPUTTYPE;

struct VIDEO_RPC_VOUT_CURRENT_BLK_TO_SEQ {
	enum VO_VIDEO_PLANE videoPlane;
	long destAddrY;
	long destAddrC;
};
typedef struct VIDEO_RPC_VOUT_CURRENT_BLK_TO_SEQ VIDEO_RPC_VOUT_CURRENT_BLK_TO_SEQ;

struct VIDEO_RPC_VOUT_SET_3D_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	VO_3D_MODE_TYPE mode_3d;
	u_short LeftDirect;
	u_short LeftOffset;
	u_short RightDirect;
	u_short RightOffset;
	u_int dataInt0;
	u_int dataInt1;
	u_int dataInt2;
	u_int dataInt3;
};
typedef struct VIDEO_RPC_VOUT_SET_3D_MODE VIDEO_RPC_VOUT_SET_3D_MODE;

struct VIDEO_RPC_VOUT_SET_3D_OUTPUT_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	VO_3D_MODE_TYPE mode_3d;
	VO_3D_OUTPUT_MODE output_mode;
};
typedef struct VIDEO_RPC_VOUT_SET_3D_OUTPUT_MODE VIDEO_RPC_VOUT_SET_3D_OUTPUT_MODE;

struct VIDEO_RPC_VOUT_FORCE2D_MODE {
	enum VO_VIDEO_PLANE videoPlane;
	VO_FORCE2D_MODE force2d_mode;
};
typedef struct VIDEO_RPC_VOUT_FORCE2D_MODE VIDEO_RPC_VOUT_FORCE2D_MODE;

struct VO_2D3D_CONFIG {
	u_int width;
	u_int height;
	u_int framerate;
	u_int progressive;
	enum VO_CHROMA_FMT chroma_fmt;
	u_int data_bit_width;
	u_int double_buf[3];
};
typedef struct VO_2D3D_CONFIG VO_2D3D_CONFIG;

struct VIDEO_RPC_VOUT_CONFIG_HDMI_3D {
	enum VO_VIDEO_PLANE videoPlane;
	u_int width;
	u_int height;
	u_int progressive;
	u_int framerate;
	enum VO_CHROMA_FMT chroma_fmt;
	u_int data_bit_width;
	u_int hw_auto_mode;
	u_int l1_st_adr;
	u_int l2_st_adr;
	u_int r1_st_adr;
	u_int r2_st_adr;
	u_int quincunx_en;
	u_int quincunx_mode_fw;
	u_int sensio3D_en;
	u_int sg3d_dataFrc;
	u_int i2rnd_sub_src;
	u_int i2rnd_display_table;
	u_int htotal;
	u_int vtotal;
	u_int h_start;
	u_int v_start;
	u_int enable_comps;
	u_int comps_bits;
	u_int comps_line_mode;
	u_int l3_st_adr;
	u_int r3_st_adr;
	u_int srcframerate;
	u_int framerate_ori;
	u_int overscan_v_start;
	u_int overscan_v_len;
	u_int hdr_source;
	u_int hdmi_4k120_flag;
	u_int vrr_en;
	u_int freesync_en;
	u_int nn_st_addr;
	u_int nn_buf_size;
	int reserved4;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_HDMI_3D VIDEO_RPC_VOUT_CONFIG_HDMI_3D;

struct VIDEO_RPC_VOUT_FORCE_HDMI_2D {
	enum VO_VIDEO_PLANE videoPlane;
	u_char force2d;
	u_char l_flag;
};
typedef struct VIDEO_RPC_VOUT_FORCE_HDMI_2D VIDEO_RPC_VOUT_FORCE_HDMI_2D;

struct VO_CAPTURE_CONFIG {
	enum VO_VIDEO_PLANE videoPlane;
	u_int width;
	u_int height;
	u_int framerate;
	u_int progressive;
	enum VO_CHROMA_FMT chroma_fmt;
	u_int data_bit_width;
	u_int double_buf[3];
};
typedef struct VO_CAPTURE_CONFIG VO_CAPTURE_CONFIG;

struct VIDEO_RPC_VOUT_SET_OSD_4K2K_MODE {
	OSD_4K2K_MODE_TYPE osd_mode;
	VO_4K2K_MODE_TYPE vo_mode;
	struct VO_RECTANGLE srcWin;
	struct VO_RECTANGLE dispWin;
};
typedef struct VIDEO_RPC_VOUT_SET_OSD_4K2K_MODE VIDEO_RPC_VOUT_SET_OSD_4K2K_MODE;

struct VIDEO_RPC_VOUT_4K2K_SEQUENCE_CONTORL {
	u_char enable;
	u_char sequence;
};
typedef struct VIDEO_RPC_VOUT_4K2K_SEQUENCE_CONTORL VIDEO_RPC_VOUT_4K2K_SEQUENCE_CONTORL;

struct VIDEO_RPC_VOUT_CONFIG_3D_STRUCT {
	enum VO_GRAPHIC_PLANE plane;
	u_char enable3D;
	enum PANEL_3D_TYPE panel_type;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_3D_STRUCT VIDEO_RPC_VOUT_CONFIG_3D_STRUCT;

struct VIDEO_RPC_VOUT_CONFIG_3D_OFFSET_STRUCT {
	enum VO_GRAPHIC_PLANE plane;
	u_char closeToViewer;
	u_char offset;
};
typedef struct VIDEO_RPC_VOUT_CONFIG_3D_OFFSET_STRUCT VIDEO_RPC_VOUT_CONFIG_3D_OFFSET_STRUCT;

struct VIDEO_RPC_DIRECT_VO_FRAME_INFO {
	uint32_t uVideoId;
	int32_t nVideoLeft;
	int32_t nVideoTop;
	int32_t nVideoWidth;
	int32_t nVideoHeight;
	int32_t nVideoPitch;
	enum DIRECT_VO_FRAME_FORMAT eVideoFormat;
	enum DIRECT_VO_FRAME_LAYOUT eVideoLayout;
	enum DIRECT_VO_FRAME_SCAN_MODE eVideoScanMode;
	enum DIRECT_VO_FRAME_3D_TYPE eVideo3DType;
	int32_t nVideoFrameRate;
	uint32_t uVideoPhyAddr;
	uint32_t uVideoBufferSize;
	int32_t nScreenLeft;
	int32_t nScreenTop;
	int32_t nScreenWidth;
	int32_t nScreenHeight;
	int32_t nScreenRotation;
	uint32_t uVideoBLAddr;
	uint32_t uVideoELAddr;
	uint32_t uVideoMDAddr;
	int64_t llPts;
	uint64_t ullVideoPts;
	enum DIRECT_VO_FRAME_FLAG eVideoFlag;
	uint32_t uReserved[3];
};
typedef struct VIDEO_RPC_DIRECT_VO_FRAME_INFO VIDEO_RPC_DIRECT_VO_FRAME_INFO;

struct VIDEO_RPC_DIRECT_VO_SHM {
	uint32_t picQWr;
	uint32_t picQRd;
	uint32_t picQDrop;
	uint32_t picQDropThresh;
	int64_t nReferencePts;
	DIRECT_VO_FRAME_CLOCK_TYPE eClockType;
	int32_t nPlayRate;
	uint32_t uProcessId;
	int32_t nAudioPort;
	int64_t llAudioRcd;
	uint32_t uSvpVersion;
	uint32_t uReserved[3];
	struct VIDEO_RPC_DIRECT_VO_FRAME_INFO frames[DIRECT_VO_FRAME_QUEUE_SIZE];
};
typedef struct VIDEO_RPC_DIRECT_VO_SHM VIDEO_RPC_DIRECT_VO_SHM;

struct VIDEO_RPC_RESOURCE_INFO {
	enum VIDEO_RESOURCE_CTRL_TYPE ctrl_type;
	enum VIDEO_RESOURCE_CORE_TYPE core_type;
	int32_t video_port;
	int32_t max_width;
	int32_t max_height;
	long instanceID;
	int32_t width;
	int32_t height;
	int32_t framerate;
};
typedef struct VIDEO_RPC_RESOURCE_INFO VIDEO_RPC_RESOURCE_INFO;

struct VIDEO_RPC_K2V_PARAM {
	long reserve0;
	long reserve1;
	long reserve2;
	long reserve3;
};
typedef struct VIDEO_RPC_K2V_PARAM VIDEO_RPC_K2V_PARAM;

struct VIDEO_RPC_VO_PHOTO_OPEN_T {
	u_int ch;
	u_int def;
	u_int buf_addr;
	u_int buf_size;
};
typedef struct VIDEO_RPC_VO_PHOTO_OPEN_T VIDEO_RPC_VO_PHOTO_OPEN_T;

struct VIDEO_RPC_VO_PHOTO_CONFIG_T {
	u_int ch;
	HAL_VO_P_CFG_T cfg;
};
typedef struct VIDEO_RPC_VO_PHOTO_CONFIG_T VIDEO_RPC_VO_PHOTO_CONFIG_T;

struct VIDEO_RPC_VO_DISPLAYPICTURE_T {
	u_int ch;
	HAL_VO_P_IMAGE_T image;
};
typedef struct VIDEO_RPC_VO_DISPLAYPICTURE_T VIDEO_RPC_VO_DISPLAYPICTURE_T;

struct VIDEO_RPC_VO_GETDEVICECAPABILITY_T {
	HAL_VO_P_DEVICE_CAPABILITY_T capability;
};
typedef struct VIDEO_RPC_VO_GETDEVICECAPABILITY_T VIDEO_RPC_VO_GETDEVICECAPABILITY_T;

struct VO_PRC_VOINFO {
	VO_VIDEO_PLANE plane;
	u_int port;
	u_int mode;
	u_int h_start;
	u_int v_start;
	u_int h_width;
	u_int v_length;
	u_int h_total;
	u_int v_total;
	RPC_VODMA_DDOMAIN_CHROMA_FMT chroma_fmt;
	u_int progressive;
	u_int h_freq;
	u_int v_freq;
	u_int pixel_clk;
	u_int i_ratio;
	u_int source;
	u_int isJPEG;
	VO_3D_MODE_TYPE mode_3d;
	VO_FORCE2D_MODE force2d;
	RPC_SLR_AFD_TYPE afd;
	u_int pixelAR_hor;
	u_int pixelAR_ver;
	u_int se_pre_width;
	u_int se_pre_height;
	u_int set_se_blank;
	u_int src_h_wid;
	u_int src_v_len;
	u_int video_full_range_flag;
	u_int xvYCC;
	u_int isAdobeRGB;
	u_int transfer_characteristics;
	u_int matrix_coefficiets;
	u_int colour_primaries;
	u_int MaxCLL;
	u_int MaxFALL;
	u_int security;
	u_int vdec_source;
	u_int colorspace;
	u_int lowdelay;
	u_int DolbyVision;
	u_int isVP9;
	DIRECT_VO_FRAME_ORIENTATION screenRotation;
	u_int color_transf;
	u_int coeffs_overscan;
	u_int dispXY0;
	u_int dispXY1;
	u_int dispXY2;
	u_int whitePointXY;
	u_int maxL;
	u_int minL;
};
typedef struct VO_PRC_VOINFO VO_PRC_VOINFO;

#endif /* !_VIDEORPC_SYSTEM_DATA_H_RPCGEN */
